// backend/controllers/paiementController.js
const Stripe = require('stripe');
require('dotenv').config();

// Initialisation des clients
const stripe = Stripe(process.env.STRIPE_SECRET_KEY);
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// üìå Webhook Stripe
exports.handleStripeWebhook = async (req, res) => {
  const sig = req.headers['stripe-signature'];

  let event;
  try {
    // Corps brut requis par Stripe pour v√©rifier la signature
    const rawBody = req.body;
    event = stripe.webhooks.constructEvent(rawBody, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    console.error("‚ùå Signature invalide Stripe:", err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  console.log("üì¶ Webhook Stripe re√ßu :", JSON.stringify(event, null, 2));

  try {
    // üéØ Si c‚Äôest un paiement r√©ussi
    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;

      const user_id = session.metadata?.user_id;
      const abonnement_type = session.metadata?.abonnement_type;
      const stripe_subscription_id = session.subscription;

      if (!user_id || !abonnement_type) {
        console.warn("‚ö†Ô∏è Donn√©es metadata manquantes:", session.metadata);
        return res.status(400).send("Donn√©es metadata manquantes");
      }

      const { error } = await supabase
        .from('abonnements')
        .insert([{
          user_id,
          abonnement_type,
          stripe_subscription_id,
          start_date: new Date().toISOString(),
          status: 'actif'
        }]);

      if (error) {
        console.error("‚ùå Erreur enregistrement abonnement:", error);
        return res.status(500).send("Erreur enregistrement abonnement");
      }

      console.log("‚úÖ Abonnement enregistr√© pour", user_id);
    } else {
      console.log("‚ÑπÔ∏è √âv√©nement non trait√© :", event.type);
    }

    res.status(200).send("OK");
  } catch (err) {
    console.error("‚ùå Erreur interne lors du traitement de l‚Äô√©v√©nement :", err.message);
    res.status(500).send("Erreur serveur interne");
  }
};
// backend/controllers/abonnementController.js

const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

const getAbonnementsForUser = async (req, res) => {
  const user_id = req.user.id;

  try {
    const { data, error } = await supabase
      .from('abonnements')
      .select('*')
      .eq('user_id', user_id)
      .order('start_date', { ascending: false });

    if (error) {
      console.error("Erreur Supabase:", error);
      return res.status(500).json({ error: "Erreur r√©cup√©ration abonnements", details: error.message });
    }

    res.json({ success: true, abonnements: data });
  } catch (e) {
    res.status(500).json({ error: "Erreur serveur", details: e.message });
  }
};

const getAllAbonnements = async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('abonnements')
      .select('*')
      .order('start_date', { ascending: false });

    if (error) {
      console.error("Erreur Supabase (admin):", error);
      return res.status(500).json({ error: "Erreur r√©cup√©ration abonnements (admin)", details: error.message });
    }

    res.json({ success: true, abonnements: data });
  } catch (e) {
    res.status(500).json({ error: "Erreur serveur", details: e.message });
  }
};

module.exports = {
  getAbonnementsForUser,
  getAllAbonnements,
};
