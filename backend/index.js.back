require('dotenv').config();
const express = require('express');
const { createClient } = require('@supabase/supabase-js');
const Joi = require('joi');

const app = express();
const PORT = 3001;

// Middleware pour parser le JSON
app.use(express.json());

// Connexion Ã  Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: { persistSession: false }
});

// SchÃ©ma de validation Joi pour une rÃ©servation
const reservationSchema = Joi.object({
  date: Joi.date().iso().required(),
  prof_id: Joi.string().min(3).max(50).required(),
  eleve_id: Joi.string().min(3).max(50).required()
});

// Middleware d'authentification
const authenticateToken = async (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1]; // Format: "Bearer <token>"

  if (!token) {
    return res.status(401).json({ error: "Token manquant" });
  }

  const { data: { user }, error } = await supabase.auth.getUser(token);

  if (error || !user) {
    return res.status(401).json({ error: "Token invalide" });
  }

  req.user = user; // Stocke les infos de l'utilisateur
  next();
};

// Route de test racine
app.get('/', (req, res) => {
  res.json({ 
    status: "API FirstArabic opÃ©rationnelle !",
    routes: {
      rÃ©server: "POST /reserver (authentifiÃ©)",
      login: "POST /login (via Supabase Auth)",
      profs: "GET /profs (public)"
    }
  });
});

// Route protÃ©gÃ©e : POST /reserver
app.post('/reserver', authenticateToken, async (req, res) => {
  try {
    const { error: validationError } = reservationSchema.validate(req.body);
    if (validationError) {
      return res.status(400).json({ 
        error: "DonnÃ©es invalides",
        details: validationError.details[0].message 
      });
    }

    const { date, prof_id, eleve_id } = req.body;

    const { data, error } = await supabase
      .from('cours')
      .insert([{ 
        date,
        prof_id,
        eleve_id,
        statut: 'confirmÃ©',
        created_by: req.user.id
      }])
      .select();

    if (error) throw error;

    res.json({ 
      success: true,
      reservation: data[0] 
    });

  } catch (error) {
    console.error("Erreur:", error.message);
    res.status(500).json({ error: "Ã‰chec de la rÃ©servation" });
  }
});

// âœ… Route protÃ©gÃ©e : POST /eleve
app.post('/eleve', authenticateToken, async (req, res) => {
  try {
    const { nom } = req.body;
    if (!nom || typeof nom !== 'string') {
      return res.status(400).json({ error: "Nom invalide ou manquant" });
    }
    console.log("ðŸ‘¤ ID utilisateur connectÃ© :", req.user.id);
						
    const { data, error } = await supabase
      .from('eleves')
      .insert([
        {
          nom,
          created_by: req.user.id
        }
      ])
      .select();

    if (error) throw error;

    res.json({ success: true, eleve: data[0] });

  } catch (error) {
    console.error("Erreur crÃ©ation Ã©lÃ¨ve:", error.message);
    res.status(500).json({ error: "Ã‰chec de la crÃ©ation de l'Ã©lÃ¨ve" });
  }
});

// âœ… Route publique : GET /profs
app.get('/profs', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('profs')
      .select('*');

    if (error) throw error;

    res.json(data);
  } catch (error) {
    console.error("Erreur /profs:", error.message);
    res.status(500).json({ error: "Erreur lors de la rÃ©cupÃ©ration des profs" });
  }
});

// âœ… Route protÃ©gÃ©e : GET /eleve (profil de l'utilisateur connectÃ©)
app.get('/eleve', authenticateToken, async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('eleves')
      .select('*')
      .eq('created_by', req.user.id)
      .single(); // un seul profil attendu

    if (error || !data) {
      return res.status(404).json({ error: "Profil Ã©lÃ¨ve non trouvÃ©" });
    }

    res.json({ eleve: data });
  } catch (error) {
    console.error("Erreur GET /eleve:", error.message);
    res.status(500).json({ error: "Erreur lors de la rÃ©cupÃ©ration du profil Ã©lÃ¨ve" });
  }
});

// âœ… Route protÃ©gÃ©e : PUT /eleve (mise Ã  jour du profil Ã©lÃ¨ve)
app.put('/eleve', authenticateToken, async (req, res) => {
  const { nom } = req.body;

  if (!nom || typeof nom !== 'string') {
    return res.status(400).json({ error: "Nom invalide ou manquant" });
  }

  try {
    const { data, error } = await supabase
      .from('eleves')
      .update({ nom })
      .eq('created_by', req.user.id)
      .select();

    if (error || !data || data.length === 0) {
      return res.status(404).json({ error: "Profil Ã©lÃ¨ve introuvable ou non modifiÃ©" });
    }

    res.json({ success: true, eleve: data[0] });
  } catch (error) {
    console.error("Erreur PUT /eleve:", error.message);
    res.status(500).json({ error: "Erreur lors de la mise Ã  jour du profil Ã©lÃ¨ve" });
  }
});

// Route publique pour obtenir le dÃ©tail d'un prof par ID
app.get('/profs/:id', async (req, res) => {
  const profId = req.params.id;

  try {
    const { data, error } = await supabase
      .from('profs')
      .select('*')
      .eq('id', profId)
      .single(); // car on s'attend Ã  un seul rÃ©sultat

    if (error) {
      return res.status(404).json({ error: "Professeur non trouvÃ©" });
    }

    res.json(data);
  } catch (error) {
    console.error("Erreur:", error.message);
    res.status(500).json({ error: "Erreur lors de la rÃ©cupÃ©ration du professeur" });
  }
});

// âœ… Route PUT pour mettre Ã  jour les disponibilitÃ©s dâ€™un prof
app.put('/profs/:id', authenticateToken, async (req, res) => {
  const profId = req.params.id;
  const { disponibilites } = req.body;

  try {
    // VÃ©rifie si le prof existe et s'il a Ã©tÃ© crÃ©Ã© par l'utilisateur connectÃ©
    const { data: prof, error: findError } = await supabase
      .from('profs')
      .select('id, created_by')
      .eq('id', profId)
      .single();

    if (findError || !prof) {
      return res.status(404).json({ error: "Professeur non trouvÃ©" });
    }

    if (prof.created_by !== req.user.id) {
      return res.status(403).json({ error: "Non autorisÃ© Ã  modifier ce profil" });
    }

    // Mise Ã  jour des disponibilitÃ©s
    const { data, error } = await supabase
      .from('profs')
      .update({ disponibilites })
      .eq('id', profId)
      .select();

    if (error) throw error;

    res.json({ success: true, prof: data[0] });

  } catch (error) {
    console.error("Erreur PUT /profs/:id:", error.message);
    res.status(500).json({ error: "Erreur lors de la mise Ã  jour" });
  }
});

// âœ… Route protÃ©gÃ©e : PUT /profs/:id (mise Ã  jour des disponibilitÃ©s)
app.put('/profs/:id', authenticateToken, async (req, res) => {
  const profId = req.params.id;
  const { disponibilites } = req.body;

  // Validation minimale
  if (!Array.isArray(disponibilites)) {
    return res.status(400).json({ error: "Format de disponibilitÃ©s invalide (doit Ãªtre un tableau)" });
  }

  try {
    // VÃ©rifie que le prof appartient bien Ã  l'utilisateur connectÃ©
    const { data: existing, error: fetchError } = await supabase
      .from('profs')
      .select('id, created_by')
      .eq('id', profId)
      .single();

    if (fetchError || !existing) {
      return res.status(404).json({ error: "Professeur non trouvÃ©" });
    }

    if (existing.created_by !== req.user.id) {
      return res.status(403).json({ error: "Non autorisÃ© Ã  modifier ce profil" });
    }

    // Mise Ã  jour des disponibilitÃ©s
    const { data, error } = await supabase
      .from('profs')
      .update({ disponibilites })
      .eq('id', profId)
      .select();

    if (error) throw error;

    res.json({ success: true, prof: data[0] });

  } catch (error) {
    console.error("Erreur PUT /profs/:id:", error.message);
    res.status(500).json({ error: "Erreur lors de la mise Ã  jour des disponibilitÃ©s" });
  }
});

// DÃ©marrer le serveur
app.listen(PORT, () => {
  console.log(`API en Ã©coute sur http://localhost:${PORT}`);
  supabase.from('cours').select('*').limit(1)
    .then(() => console.log("Connexion Supabase OK"))
    .catch(e => console.error("Erreur Supabase:", e.message));
});
