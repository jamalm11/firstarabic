// backend/routes/coursRoutes.js
const express = require("express");
const router = express.Router();
const { coursSchema } = require("../validators/coursValidator");
const { createClient } = require("@supabase/supabase-js");
const supabaseAdmin = require("../supabaseAdminClient");

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

const initSupabase = (req) =>
  createClient(supabaseUrl, supabaseKey, {
    global: { headers: { Authorization: req.headers.authorization } },
  });

// 📥 Créer un cours
router.post("/", async (req, res) => {
  console.log("\n🟢 [API] POST /cours appelée");
  console.log("📥 Données reçues dans le body:", JSON.stringify(req.body, null, 2));

  const { error: validationError } = coursSchema.validate(req.body);
  if (validationError) {
    console.log("🚫 [Validation] Erreur Joi:", validationError.details[0].message);
    return res.status(400).json({
      error: "Données invalides",
      details: validationError.details[0].message,
    });
  }

  const supabase = initSupabase(req);
  const { date, prof_id, eleve_id } = req.body;

  try {
    console.log("🔐 Tentative récupération utilisateur courant...");
    const { data: userData, error: userError } = await supabase.auth.getUser();
    if (userError || !userData?.user) {
      console.log("🚫 [Auth] Erreur récupération utilisateur:", userError?.message);
      return res.status(401).json({ message: "Utilisateur non authentifié" });
    }

    const user_id = userData.user.id;
    console.log("✅ [Auth] Utilisateur authentifié ID:", user_id);

    console.log(`🔎 Vérification de l'élève ${eleve_id} appartenant à l'utilisateur...`);
    const { data: eleve, error: eleveError } = await supabase
      .from("eleves")
      .select("*")
      .eq("id", eleve_id)
      .eq("created_by", user_id)
      .single();

    if (eleveError || !eleve) {
      console.log("🚫 [Sécurité] Élève introuvable ou non autorisé:", eleveError?.message || "Aucun élève retourné");
      return res.status(403).json({ message: "Élève non autorisé ou inexistant" });
    }

    console.log("✅ [Sécurité] Élève autorisé. Passage à l'insertion du cours...");
    console.log("📤 Données insérées:", { date, prof_id, eleve_id });

    const { error: insertError } = await supabase
      .from("cours")
      .insert([{ date, prof_id, eleve_id }]);

    if (insertError) {
      console.log("❌ [DB] Erreur insertion cours:", insertError.message);
      return res.status(500).json({ message: "Erreur création cours" });
    }

    console.log("✅ [Succès] Cours inséré avec succès ✅");
    return res.status(200).json({ message: "Cours réservé avec succès" });
  } catch (err) {
    console.error("❌ [Exception] Erreur inattendue dans POST /cours:", err);
    return res.status(500).json({ message: "Erreur serveur" });
  }
});
module.exports = router;
