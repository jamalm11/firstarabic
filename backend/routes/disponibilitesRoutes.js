// backend/routes/disponibilitesRoutes.js
const express = require("express");
const router = express.Router();
const { disponibiliteSchema, updateDisponibiliteSchema } = require("../validators/disponibiliteValidator");
const authenticateToken = require("../middleware/authenticateToken");
const supabaseAdmin = require("../supabaseAdminClient");

// üîí Middleware
router.use(authenticateToken);

// ‚úÖ Cr√©er une disponibilit√©
router.post("/", async (req, res) => {
  console.log("üÜï [POST] /disponibilites - Donn√©es re√ßues:", req.body);

  const { error } = disponibiliteSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  const { jour, heure_debut, heure_fin, prof_id } = req.body;

  try {
    const { data, error } = await supabaseAdmin
      .from("disponibilites")
      .insert([{ jour, heure_debut, heure_fin, prof_id }])
      .select();

    if (error) throw error;

    res.json({ success: true, disponibilite: data[0] });
  } catch (err) {
    console.error("‚ùå Erreur cr√©ation disponibilit√©:", err);
    res.status(500).json({ error: "Erreur cr√©ation disponibilit√©", details: err.message });
  }
});

// ‚úÖ R√©cup√©rer toutes les disponibilit√©s

// ‚úÖ R√©cup√©rer toutes les disponibilit√©s (MODIFI√â pour supporter prof_id)
router.get("/", async (req, res) => {
  try {
    const { prof_id } = req.query; // üÜï R√©cup√©rer le prof_id depuis les query params
    
    let query = req.supabase.from("disponibilites").select("*");
    
    // üÜï Filtrer par prof_id si fourni
    if (prof_id) {
      query = query.eq("prof_id", prof_id);
    }
    
    const { data, error } = await query;
    if (error) throw error;
    
    res.json({ success: true, disponibilites: data });
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration disponibilit√©s:", err);
    res.status(500).json({ error: "Erreur r√©cup√©ration disponibilit√©s", details: err.message });
  }
});


// router.get("/", async (req, res) => {
//  try {
//    const { data, error } = await req.supabase.from("disponibilites").select("*");
//    if (error) throw error;
//    res.json({ success: true, disponibilites: data });
//  } catch (err) {
//    console.error("‚ùå Erreur r√©cup√©ration disponibilit√©s:", err);
//    res.status(500).json({ error: "Erreur r√©cup√©ration disponibilit√©s", details: err.message });
//  }
// });

// ‚úÖ R√©cup√©rer une disponibilit√© par ID
router.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { data, error } = await req.supabase
      .from("disponibilites")
      .select("*")
      .eq("id", id)
      .maybeSingle();

    if (error) throw error;
    res.json({ success: true, disponibilite: data });
  } catch (err) {
    console.error("‚ùå Erreur r√©cup√©ration disponibilit√© par ID:", err);
    res.status(500).json({ error: "Erreur r√©cup√©ration disponibilit√©", details: err.message });
  }
});

// ‚úÖ Mettre √† jour une disponibilit√© (PUT)
router.put("/:id", async (req, res) => {
  console.log("‚úèÔ∏è [PUT] /disponibilites/:id - Donn√©es re√ßues:", req.body);

  const { error } = disponibiliteSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  try {
    const { id } = req.params;
    const { jour, heure_debut, heure_fin, prof_id } = req.body;

    const { data, error } = await req.supabase
      .from("disponibilites")
      .update({ jour, heure_debut, heure_fin, prof_id })
      .eq("id", id)
      .select();

    if (error) throw error;
    res.json({ success: true, disponibilite: data[0] });
  } catch (err) {
    console.error("‚ùå Erreur mise √† jour disponibilit√©:", err);
    res.status(500).json({ error: "Erreur mise √† jour disponibilit√©", details: err.message });
  }
});

// ‚úÖ Mettre √† jour partiellement une disponibilit√© (PATCH)
router.patch("/:id", async (req, res) => {
  console.log("‚úèÔ∏è [PATCH] /disponibilites/:id - Donn√©es re√ßues:", req.body);

  const { error } = updateDisponibiliteSchema.validate(req.body);
  if (error) return res.status(400).json({ error: error.details[0].message });

  try {
    const { id } = req.params;
    const updateFields = req.body;

    const { data, error } = await req.supabase
      .from("disponibilites")
      .update(updateFields)
      .eq("id", id)
      .select();

    if (error) throw error;
    res.json({ success: true, disponibilite: data[0] });
  } catch (err) {
    console.error("‚ùå Erreur patch disponibilit√©:", err);
    res.status(500).json({ error: "Erreur mise √† jour disponibilit√©", details: err.message });
  }
});

// ‚úÖ Supprimer une disponibilit√©
router.delete("/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const { error } = await req.supabase
      .from("disponibilites")
      .delete()
      .eq("id", id);

    if (error) throw error;
    res.json({ success: true, message: "Disponibilit√© supprim√©e" });
  } catch (err) {
    console.error("‚ùå Erreur suppression disponibilit√©:", err);
    res.status(500).json({ error: "Erreur suppression disponibilit√©", details: err.message });
  }
});

module.exports = router;
