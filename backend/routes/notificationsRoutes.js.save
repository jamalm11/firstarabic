


qqq


  ff// backend/routes/notificationsRoutes.js
const express = require('express');
const router = express.Router();
const { notificationSchema, updateNotificationSchema } = require('../validators/notificationValidator');
const authenticateToken = require('../middleware/authenticateToken');
const supabase = require('../supabaseClient');

// üì• Cr√©er une notification
router.post('/', authenticateToken, async (req, res) => {
  const { error: validationError } = notificationSchema.validate(req.body);
  if (validationError) {
    return res.status(400).json({ error: "Donn√©es invalides", details: validationError.details[0].message });
  }

  const { message, lue, type } = req.body;
  const created_by = req.user.id;

  try {
    const { data, error } = await supabase
      .from('notifications')
      .insert([{ message, lue: lue || false, type: type || 'info', created_by }])
      .select()
      .maybeSingle();

    if (error) throw error;
    console.log("‚úÖ Notification cr√©√©e:", data);
    res.json({ success: true, notification: data });
  } catch (e) {
    console.error("‚ùå Erreur cr√©ation notif:", e.message);
    res.status(500).json({ error: "Erreur cr√©ation notification", details: e.message });
  }
});

// üìã R√©cup√©rer ses notifications
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('notifications')
      .select('*')
      .eq('created_by', req.user.id)
      .order('created_at', { ascending: false });

    if (error) throw error;
    res.json({ success: true, notifications: data });
  } catch (e) {
    console.error("‚ùå Erreur lecture notifs:", e.message);
    res.status(500).json({ error: "Erreur lecture notifications", details: e.message });
  }
});

// ‚úÖ Marquer une notification comme lue
router.patch('/:id/lue', authenticateToken, async (req, res) => {
  const notifId = req.params.id;

  try {
    const { data, error } = await supabase
      .from('notifications')
      .update({ lue: true })
      .eq('id', notifId)
      .eq('created_by', req.user.id)
      .select()
      .maybeSingle();

    if (error) throw error;
    res.json({ success: true, notification: data });
  } catch (e) {
    console.error("‚ùå Erreur maj lue:", e.message);
    res.status(500).json({ error: "Erreur maj notification", details: e.message });
  }
});

// üóëÔ∏è Supprimer une notification
router.delete('/:id', authenticateToken, async (req, res) => {
  const notifId = req.params.id;

  try {
    const { error } = await supabase
      .from('notifications')
      .delete()
      .eq('id', notifId)
      .eq('created_by', req.user.id);

    if (error) throw error;
    res.json({ success: true, message: "Notification supprim√©e" });
  } catch (e) {
    console.error("‚ùå Erreur suppression notif:", e.message);
    res.status(500).json({ error: "Erreur suppression notification", details: e.message });
  }
});

module.exports = router;
