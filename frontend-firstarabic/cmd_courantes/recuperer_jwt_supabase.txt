Voici un rÃ©sumÃ© clair et structurÃ© de ce que nous avons fait, Ã©tape par Ã©tape, pour tester lâ€™authentification avec Supabase et effectuer un appel protÃ©gÃ© avec curl.

â¸»

âœ… Objectif

Tester une route protÃ©gÃ©e de ton backend (/eleves) avec un token dâ€™authentification dâ€™un Ã©lÃ¨ve rÃ©cupÃ©rÃ© depuis Supabase.

â¸»

ğŸ§© Ã‰tapes rÃ©alisÃ©es

1. CrÃ©ation dâ€™un utilisateur Ã©lÃ¨ve

Lâ€™utilisateur eleve21@jxpomup.com a Ã©tÃ© inscrit et son mot de passe est 111111.

â¸»

2. RÃ©cupÃ©ration du token Supabase via curl

Nous avons utilisÃ© lâ€™endpoint Supabase suivant pour rÃ©cupÃ©rer un access_token :

POST https://<PROJECT>.supabase.co/auth/v1/token?grant_type=password
 RequÃªte curl complÃ¨te :
curl -X POST 'https://aerhvxfzzpveykkedmej.supabase.co/auth/v1/token?grant_type=password' \
  -H 'Content-Type: application/json' \
  -H 'apikey: <SUPABASE_ANON_KEY>' \
  -d '{
    "email": "eleve21@jxpomup.com",
    "password": "111111"
  }'


ğŸ‘‰ RÃ©sultat : un access_token JWT est retournÃ© dans la rÃ©ponse JSON.

â¸»

3. Appel dâ€™une route protÃ©gÃ©e via curl

Maintenant que tu as un access_token, tu peux appeler une route backend sÃ©curisÃ©e.

âœ… Exemple : accÃ©der Ã  /eleves


curl -X GET http://localhost:3001/eleves \
  -H "Authorization: Bearer <access_token>" \
  -H "Content-Type: application/json"

ğŸ‘‰ Le backend valide le token (via supabase.auth.getUser(token)), et retourne les donnÃ©es liÃ©es Ã  lâ€™Ã©lÃ¨ve connectÃ© (created_by = user.id).

â¸»

ğŸ“¦ RÃ©sumÃ© technique

Ã‰tape
DÃ©tail technique
Authentification
Supabase avec grant_type=password
RÃ©cupÃ©ration du token
Via curl + API REST Supabase
Appel backend sÃ©curisÃ©
Token passÃ© dans lâ€™en-tÃªte Authorization: Bearer <token>
Middleware backend
authenticateToken utilise supabase.auth.getUser()
Filtrage des donnÃ©es
Les routes filtrent les donnÃ©es en fonction de user.id (ex. : created_by)

