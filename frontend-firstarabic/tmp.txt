import React, { useEffect, useState } from "react";
import axios from "axios";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";

function AdminProfValidation() {
  const [profs, setProfs] = useState([]);
  const [token, setToken] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Récupérer le token d'authentification
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) {
        alert("🔐 Accès réservé aux administrateurs");
        navigate("/login");
        return;
      }
      setToken(session.access_token);
    });
  }, [navigate]);

  useEffect(() => {
    if (!token) return;

    // Charger tous les profs non validés
    axios
      .get("http://localhost:3001/profs/all", {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((res) => {
        const nonValides = res.data.profs.filter((p) => !p.is_validated);
        setProfs(nonValides);
      })
      .catch((err) => {
        console.error("Erreur chargement profs", err);
        alert("Erreur chargement des professeurs");
      });
  }, [token]);

  const validerProf = async (id) => {
    try {
      await axios.put(
        `http://localhost:3001/prof/${id}/valider`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setProfs(profs.filter((p) => p.id !== id));
      alert("✅ Prof validé !");
    } catch (err) {
      console.error("Erreur validation prof", err);
      alert("Erreur validation prof");
    }
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h2>🧑‍🏫 Validation des professeurs</h2>
      {profs.length === 0 ? (
        <p>Aucun professeur en attente de validation.</p>
      ) : (
        <ul>
          {profs.map((prof) => (
            <li key={prof.id} style={{ marginBottom: "1rem" }}>
              {prof.nom} ({prof.email}){" "}
              <button onClick={() => validerProf(prof.id)}>✅ Valider</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default AdminProfValidation;
// src/pages/Dashboard.js - Version mise à jour avec évaluations
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { supabase } from "../supabaseClient";
import axios from "axios";

function Dashboard() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [coursToReview, setCoursToReview] = useState([]);
  const [loadingReviews, setLoadingReviews] = useState(false);

  // Récupération de la session (votre code existant)
  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      if (session) {
        setToken(session.access_token);
      }
    });
  }, []);

  // Récupération des cours à évaluer
  useEffect(() => {
    const fetchCoursToReview = async () => {
      if (!token) return;

      setLoadingReviews(true);
      try {
        const response = await axios.get('http://localhost:3001/reviews/can-review', {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.data.success) {
          setCoursToReview(response.data.cours_to_review);
        }
      } catch (err) {
        console.error("Erreur récupération cours à évaluer:", err);
      } finally {
        setLoadingReviews(false);
      }
    };

    fetchCoursToReview();
  }, [token]);

  const handleLogout = async () => {
    await supabase.auth.signOut();
    window.location.href = "/";
  };

  if (!session) return <p>Chargement...</p>;

  return (
    <div style={{ padding: "2rem", maxWidth: "800px", margin: "0 auto" }}>
      <h1>👋 Bienvenue dans l'espace élève</h1>
      <p>Connecté : {session.user.email}</p>
      
      {/* Navigation principale */}
      <div style={{ 
        background: "#f8f9fa", 
        padding: "1.5rem", 
        borderRadius: "12px", 
        marginBottom: "2rem" 
      }}>
        <h3>🚀 Actions rapides</h3>
        <div style={{ display: "flex", flexDirection: "column", gap: "0.5rem" }}>
          <Link 
            to="/professeurs" 
            style={{ 
              color: "#667eea", 
              textDecoration: "none", 
              fontWeight: "500",
              padding: "0.5rem 0"
            }}
          >
            📌 Réserver un cours
          </Link>
          <Link 
            to="/planning" 
            style={{ 
              color: "#667eea", 
              textDecoration: "none", 
              fontWeight: "500",
              padding: "0.5rem 0"
            }}
          >
            📅 Voir mon planning
          </Link>
        </div>
      </div>

      {/* Section des évaluations */}
      <div style={{ 
        background: "#fff3cd", 
        padding: "1.5rem", 
        borderRadius: "12px", 
        marginBottom: "2rem",
        border: "1px solid #ffeaa7"
      }}>
        <h3>⭐ Cours à évaluer</h3>
        
        {loadingReviews ? (
          <p>Chargement des cours...</p>
        ) : coursToReview.length === 0 ? (
          <p style={{ color: "#6c757d", fontStyle: "italic" }}>
            Aucun cours terminé à évaluer pour le moment.
          </p>
        ) : (
          <div>
            <p style={{ marginBottom: "1rem", color: "#856404" }}>
              Vous avez {coursToReview.length} cours terminé{coursToReview.length > 1 ? 's' : ''} en attente d'évaluation :
            </p>
            
            {coursToReview.map((cours) => (
              <div 
                key={cours.id} 
                style={{
                  background: "white",
                  padding: "1rem",
                  borderRadius: "8px",
                  marginBottom: "1rem",
                  border: "1px solid #dee2e6",
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center"
                }}
              >
                <div>
                  <strong>👨‍🏫 {cours.profs?.nom}</strong>
                  <div style={{ fontSize: "0.9rem", color: "#6c757d" }}>
                    📅 {new Date(cours.date).toLocaleDateString('fr-FR', {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                  <div style={{ fontSize: "0.8rem", color: "#28a745" }}>
                    ✅ {cours.statut}
                  </div>
                </div>
                
                <Link 
                  to={`/review/${cours.id}`}
                  style={{
                    background: "#ffc107",
                    color: "#212529",
                    padding: "0.5rem 1rem",
                    borderRadius: "6px",
                    textDecoration: "none",
                    fontWeight: "500",
                    fontSize: "0.9rem"
                  }}
                >
                  ⭐ Évaluer
                </Link>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Section mes évaluations */}
      <div style={{ 
        background: "#d1ecf1", 
        padding: "1.5rem", 
        borderRadius: "12px", 
        marginBottom: "2rem",
        border: "1px solid #bee5eb"
      }}>
        <h3>📝 Mes évaluations</h3>
        <p style={{ marginBottom: "1rem", color: "#0c5460" }}>
          Consultez et gérez vos avis déjà publiés.
        </p>
        <Link 
          to="/my-reviews" 
          style={{ 
            color: "#0c5460", 
            textDecoration: "none", 
            fontWeight: "500",
            background: "white",
            padding: "0.5rem 1rem",
            borderRadius: "6px",
            display: "inline-block"
          }}
        >
          👁️ Voir mes évaluations
        </Link>
      </div>

      {/* Statistiques rapides */}
      <div style={{ 
        background: "#f8f9fa", 
        padding: "1.5rem", 
        borderRadius: "12px", 
        marginBottom: "2rem" 
      }}>
        <h3>📊 Mes statistiques</h3>
        <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(150px, 1fr))", gap: "1rem" }}>
          <div style={{ textAlign: "center", padding: "1rem", background: "white", borderRadius: "8px" }}>
            <div style={{ fontSize: "2rem", color: "#667eea" }}>📚</div>
            <div style={{ fontWeight: "600", color: "#2d3748" }}>Cours suivis</div>
            <div style={{ color: "#6c757d" }}>Bientôt disponible</div>
          </div>
          <div style={{ textAlign: "center", padding: "1rem", background: "white", borderRadius: "8px" }}>
            <div style={{ fontSize: "2rem", color: "#10b981" }}>⭐</div>
            <div style={{ fontWeight: "600", color: "#2d3748" }}>Évaluations</div>
            <div style={{ color: "#6c757d" }}>{coursToReview.length} en attente</div>
          </div>
          <div style={{ textAlign: "center", padding: "1rem", background: "white", borderRadius: "8px" }}>
            <div style={{ fontSize: "2rem", color: "#f59e0b" }}>🏆</div>
            <div style={{ fontWeight: "600", color: "#2d3748" }}>Progression</div>
            <div style={{ color: "#6c757d" }}>Bientôt disponible</div>
          </div>
        </div>
      </div>

      {/* Déconnexion */}
      <button 
        onClick={handleLogout} 
        style={{ 
          background: "#dc3545",
          color: "white",
          border: "none",
          padding: "0.75rem 1.5rem",
          borderRadius: "8px",
          cursor: "pointer",
          fontWeight: "500"
        }}
      >
        🚪 Se déconnecter
      </button>
    </div>
  );
}

export default Dashboard;
// src/pages/ForgotPassword.js
import React, { useState } from 'react';
import { supabase } from '../supabaseClient';

function ForgotPassword() {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState(null);

  const handleReset = async (e) => {
    e.preventDefault();
    setMessage(null);

    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: "http://localhost:3000/reset-password",
    });

    if (error) {
      setMessage({ type: 'error', text: error.message });
    } else {
      setMessage({ type: 'success', text: "📧 Un lien de réinitialisation a été envoyé." });
    }
  };

  return (
    <div>
      <h2>Mot de passe oublié</h2>
      <form onSubmit={handleReset}>
        <input
          type="email"
          placeholder="Votre email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <button type="submit">Réinitialiser le mot de passe</button>
      </form>
      {message && <p style={{ color: message.type === 'error' ? 'red' : 'green' }}>{message.text}</p>}
    </div>
  );
}

export default ForgotPassword;
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import { Link } from 'react-router-dom';

function Login() {
  const [email, setEmail] = useState('');
  const [motDePasse, setMotDePasse] = useState('');
  const [erreur, setErreur] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setErreur('');

    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password: motDePasse,
    });

    if (error) {
      setErreur("❌ Email ou mot de passe incorrect");
    } else {
      navigate('/dashboard');
    }
  };

  return (
    <div>
      <h2>Connexion</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Mot de passe"
          value={motDePasse}
          onChange={(e) => setMotDePasse(e.target.value)}
          required
        />
        <button type="submit">Se connecter</button>
      </form>
      
      {erreur && <p style={{ color: 'red' }}>{erreur}</p>}

      <p style={{ marginTop: "10px" }}>
        <Link to="/forgot-password">Mot de passe oublié ?</Link>
      </p>
    </div>
  );
}

export default Login;
// src/pages/MesCoursProf.js
import React, { useEffect, useState } from "react";
import axios from "axios";
import { supabase } from "../supabaseClient";

function MesCoursProf() {
  const [cours, setCours] = useState([]);
  const [loading, setLoading] = useState(true);

useEffect(() => {
  const fetchCours = async () => {
    try {
      const { data: sessionData, error: sessionErr } = await supabase.auth.getSession();

      if (sessionErr) {
        console.error("❌ Erreur récupération session Supabase :", sessionErr);
        return;
      }

      const token = sessionData?.session?.access_token;
      console.log("🔐 Token actuel (frontend) :", token);

      const res = await axios.get("http://localhost:3001/cours-prof", {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("✅ Données reçues depuis backend :", res.data);
      setCours(res.data.cours || []);
    } catch (err) {
      console.error("❌ Erreur appel API /cours-prof :", err.response?.data || err.message);
    } finally {
      setLoading(false);
    }
  };

  fetchCours();
}, []);

  const generateJitsiLink = (coursId) => {
    return `https://meet.jit.si/FirstArabic-${coursId}`;
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h2>📚 Mes Cours à Venir</h2>

      {loading ? (
        <p>Chargement...</p>
      ) : cours.length === 0 ? (
        <p>Aucun cours programmé.</p>
      ) : (
        cours.map((c) => (
          <div key={c.id} style={{ marginBottom: "1.5rem", borderBottom: "1px solid #ccc", paddingBottom: "1rem" }}>
            <h4>{new Date(c.date).toLocaleString("fr-FR")}</h4>
            <p><strong>Statut :</strong> {c.statut}</p>
            <p><strong>Élève :</strong> {c.eleves?.nom || "Nom inconnu"} ({c.eleves?.email || "Email inconnu"})</p>
            <a
              href={generateJitsiLink(c.id)}
              target="_blank"
              rel="noopener noreferrer"
              style={{ color: "blue", textDecoration: "underline" }}
            >
              🔗 Lien vers la classe virtuelle
            </a>
          </div>
        ))
      )}
    </div>
  );
}

export default MesCoursProf;
/* src/pages/MyReviews.css */

.my-reviews-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

/* Header */
.reviews-header {
  text-align: center;
  margin-bottom: 2rem;
  color: white;
}

.reviews-header h1 {
  font-size: 2.5rem;
  font-weight: 800;
  margin-bottom: 0.5rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.reviews-header p {
  font-size: 1.1rem;
  opacity: 0.9;
  margin-bottom: 1rem;
}

.back-link {
  color: white;
  text-decoration: none;
  font-weight: 500;
  padding: 0.5rem 1rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 20px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  display: inline-block;
}

.back-link:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
}

/* Statistiques */
.stats-section {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: white;
  border-radius: 15px;
  padding: 1.5rem;
  text-align: center;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.stat-number {
  font-size: 2.5rem;
  font-weight: 800;
  color: #667eea;
  margin-bottom: 0.5rem;
}

.stat-label {
  color: #6b7280;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Message si pas d'évaluations */
.no-reviews {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.no-reviews-icon {
  font-size: 4rem;
  margin-bottom: 1rem;
}

.no-reviews h3 {
  font-size: 1.5rem;
  color: #374151;
  margin-bottom: 1rem;
}

.no-reviews p {
  color: #6b7280;
  margin-bottom: 2rem;
  line-height: 1.6;
}

/* Liste des évaluations */
.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

/* Carte d'évaluation */
.review-card {
  background: white;
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
}

.review-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
}

/* Header de la carte */
.review-header {
  padding: 1.5rem;
  background: linear-gradient(45deg, #f8fafc, #edf2f7);
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #e2e8f0;
}

.professor-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.professor-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  overflow: hidden;
  border: 3px solid #667eea;
  flex-shrink: 0;
}

.professor-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  color: white;
}

.professor-details h3 {
  font-size: 1.2rem;
  color: #2d3748;
  margin-bottom: 0.3rem;
}

.course-date {
  color: #6b7280;
  font-size: 0.9rem;
}

.review-status {
  text-align: right;
}

.status-public {
  background: #10b981;
  color: white;
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  font-size: 0.8rem;
  font-weight: 500;
}

.status-private {
  background: #6b7280;
  color: white;
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  font-size: 0.8rem;
  font-weight: 500;
}

/* Contenu de l'évaluation */
.review-content {
  padding: 1.5rem;
}

.ratings-section {
  margin-bottom: 1.5rem;
}

.star-display {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.8rem;
}

.star-label {
  font-weight: 500;
  color: #374151;
  min-width: 120px;
  font-size: 0.9rem;
}

.stars {
  display: flex;
  gap: 0.1rem;
}

.star {
  font-size: 1.2rem;
}

.star.filled {
  color: #fbbf24;
}

.star:not(.filled) {
  color: #d1d5db;
}

.star-count {
  font-size: 0.8rem;
  color: #6b7280;
  font-weight: 500;
}

/* Commentaire */
.comment-section {
  background: #f8fafc;
  padding: 1rem;
  border-radius: 10px;
  border-left: 4px solid #667eea;
}

.comment-section h4 {
  font-size: 0.9rem;
  color: #374151;
  margin-bottom: 0.5rem;
}

.comment-text {
  font-style: italic;
  color: #4b5563;
  line-height: 1.5;
  margin: 0;
}

/* Footer de la carte */
.review-footer {
  padding: 1rem 1.5rem;
  background: #f8fafc;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-top: 1px solid #e2e8f0;
}

.review-date {
  font-size: 0.8rem;
  color: #6b7280;
}

.updated-note {
  display: block;
  font-style: italic;
  margin-top: 0.2rem;
}

.review-actions {
  display: flex;
  gap: 0.5rem;
}

.btn-delete {
  background: #ef4444;
  color: white;
  border: none;
  padding: 0.4rem 0.8rem;
  border-radius: 8px;
  font-size: 0.8rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-delete:hover {
  background: #dc2626;
  transform: translateY(-1px);
}

/* Boutons */
.btn-primary {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  text-decoration: none;
  display: inline-block;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
  background: #f8fafc;
  color: #4a5568;
  padding: 1rem 2rem;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-weight: 500;
  text-decoration: none;
  display: inline-block;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.btn-secondary:hover {
  background: #edf2f7;
  border-color: #cbd5e0;
}

/* Call to action */
.cta-section {
  text-align: center;
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 2rem;
  color: white;
}

.cta-section h3 {
  margin-bottom: 0.5rem;
  font-size: 1.3rem;
}

.cta-section p {
  margin-bottom: 1.5rem;
  opacity: 0.9;
}

/* États de chargement */
.loading-state, .error-state {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #e2e8f0;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.error-state h2 {
  color: #ef4444;
  margin-bottom: 1rem;
}

.error-state p {
  color: #6b7280;
  margin-bottom: 1.5rem;
}

/* Responsive */
@media (max-width: 768px) {
  .my-reviews-container {
    padding: 1rem;
  }

  .reviews-header h1 {
    font-size: 2rem;
  }

  .stats-section {
    grid-template-columns: 1fr;
  }

  .review-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }

  .professor-info {
    flex-direction: column;
  }

  .star-display {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.3rem;
  }

  .star-label {
    min-width: auto;
  }

  .review-footer {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
}
// src/pages/MyReviews.js - Page pour voir ses évaluations
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import axios from 'axios';
import './MyReviews.css';

function MyReviews() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [myReviews, setMyReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Récupération de la session
  useEffect(() => {
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        navigate('/');
        return;
      }
      setSession(session);
      setToken(session.access_token);
    };
    getSession();
  }, [navigate]);

  // Récupération des évaluations
  useEffect(() => {
    const fetchMyReviews = async () => {
      if (!token) return;

      try {
        const response = await axios.get('http://localhost:3001/reviews/my-reviews', {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.data.success) {
          setMyReviews(response.data.my_reviews);
        }
      } catch (err) {
        console.error("Erreur récupération mes évaluations:", err);
        setError("Erreur lors du chargement de vos évaluations");
      } finally {
        setLoading(false);
      }
    };

    fetchMyReviews();
  }, [token]);

  // Fonction pour afficher les étoiles
  const StarDisplay = ({ rating, label }) => {
    if (!rating) return null;
    
    return (
      <div className="star-display">
        <span className="star-label">{label}:</span>
        <div className="stars">
          {[1, 2, 3, 4, 5].map((star) => (
            <span key={star} className={`star ${star <= rating ? 'filled' : ''}`}>
              ⭐
            </span>
          ))}
        </div>
        <span className="star-count">({rating}/5)</span>
      </div>
    );
  };

  // Fonction pour supprimer une évaluation
  const handleDeleteReview = async (reviewId) => {
    if (!window.confirm("Êtes-vous sûr de vouloir supprimer cette évaluation ?")) {
      return;
    }

    try {
      await axios.delete(`http://localhost:3001/reviews/${reviewId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      // Recharger les évaluations
      setMyReviews(myReviews.filter(review => review.id !== reviewId));
      alert("✅ Évaluation supprimée avec succès");
    } catch (err) {
      console.error("Erreur suppression évaluation:", err);
      alert("❌ Erreur lors de la suppression");
    }
  };

  if (loading) return (
    <div className="my-reviews-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>Chargement de vos évaluations...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="my-reviews-container">
      <div className="error-state">
        <h2>❌ Erreur</h2>
        <p>{error}</p>
        <Link to="/dashboard" className="btn-secondary">← Retour au dashboard</Link>
      </div>
    </div>
  );

  return (
    <div className="my-reviews-container">
      
      {/* Header */}
      <div className="reviews-header">
        <h1>📝 Mes Évaluations</h1>
        <p>Consultez et gérez vos avis sur les cours suivis</p>
        <Link to="/dashboard" className="back-link">← Retour au dashboard</Link>
      </div>

      {/* Statistiques rapides */}
      <div className="stats-section">
        <div className="stat-card">
          <div className="stat-number">{myReviews.length}</div>
          <div className="stat-label">Cours évalués</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {myReviews.length > 0 
              ? (myReviews.reduce((acc, r) => acc + r.rating, 0) / myReviews.length).toFixed(1)
              : '0'
            }
          </div>
          <div className="stat-label">Note moyenne donnée</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{myReviews.filter(r => r.is_public).length}</div>
          <div className="stat-label">Avis publics</div>
        </div>
      </div>

      {/* Liste des évaluations */}
      {myReviews.length === 0 ? (
        <div className="no-reviews">
          <div className="no-reviews-icon">📝</div>
          <h3>Aucune évaluation pour le moment</h3>
          <p>Vos évaluations de cours apparaîtront ici une fois que vous aurez donné votre avis.</p>
          <Link to="/dashboard" className="btn-primary">
            Retour au dashboard
          </Link>
        </div>
      ) : (
        <div className="reviews-list">
          {myReviews.map((review) => (
            <div key={review.id} className="review-card">
              
              {/* Header de la carte */}
              <div className="review-header">
                <div className="professor-info">
                  <div className="professor-avatar">
                    {review.profs?.photo_url ? (
                      <img src={review.profs.photo_url} alt={review.profs.nom} />
                    ) : (
                      <div className="avatar-placeholder">👨‍🏫</div>
                    )}
                  </div>
                  <div className="professor-details">
                    <h3>Cours avec {review.profs?.nom}</h3>
                    <div className="course-date">
                      📅 {new Date(review.cours?.date).toLocaleDateString('fr-FR', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                </div>
                
                <div className="review-status">
                  {review.is_public ? (
                    <span className="status-public">🌍 Public</span>
                  ) : (
                    <span className="status-private">🔒 Privé</span>
                  )}
                </div>
              </div>

              {/* Évaluations */}
              <div className="review-content">
                <div className="ratings-section">
                  <StarDisplay rating={review.rating} label="Note générale" />
                  {review.pedagogie_rating && (
                    <StarDisplay rating={review.pedagogie_rating} label="Pédagogie" />
                  )}
                  {review.communication_rating && (
                    <StarDisplay rating={review.communication_rating} label="Communication" />
                  )}
                  {review.ponctualite_rating && (
                    <StarDisplay rating={review.ponctualite_rating} label="Ponctualité" />
                  )}
                </div>

                {review.commentaire && (
                  <div className="comment-section">
                    <h4>💬 Votre commentaire :</h4>
                    <p className="comment-text">"{review.commentaire}"</p>
                  </div>
                )}
              </div>

              {/* Footer avec actions */}
              <div className="review-footer">
                <div className="review-date">
                  Évalué le {new Date(review.created_at).toLocaleDateString('fr-FR')}
                  {review.updated_at !== review.created_at && (
                    <span className="updated-note">
                      (modifié le {new Date(review.updated_at).toLocaleDateString('fr-FR')})
                    </span>
                  )}
                </div>
                
                <div className="review-actions">
                  <button 
                    onClick={() => handleDeleteReview(review.id)}
                    className="btn-delete"
                  >
                    🗑️ Supprimer
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Call to action */}
      {myReviews.length > 0 && (
        <div className="cta-section">
          <h3>🌟 Continuez à partager vos expériences !</h3>
          <p>Vos avis aident d'autres élèves à choisir le bon professeur.</p>
          <Link to="/dashboard" className="btn-primary">
            Voir les cours à évaluer
          </Link>
        </div>
      )}
    </div>
  );
}

export default MyReviews;
// src/pages/Planning.js
import React, { useEffect, useState } from "react";
import { Calendar, dateFnsLocalizer } from "react-big-calendar";
import format from "date-fns/format";
import parse from "date-fns/parse";
import startOfWeek from "date-fns/startOfWeek";
import getDay from "date-fns/getDay";
import "react-big-calendar/lib/css/react-big-calendar.css";
import fr from "date-fns/locale/fr";
import { supabase } from "../supabaseClient";

const locales = {
  fr: fr,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});

function Planning() {
  const [events, setEvents] = useState([]);

  useEffect(() => {
    const fetchPlanning = async () => {
      const token = (await supabase.auth.getSession()).data.session?.access_token;

      if (!token) return;

      const response = await fetch("http://localhost:3001/planning", {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      const result = await response.json();

      if (result.success && result.planning) {
        const formatted = result.planning.map((cours) => ({
          title: `${cours.eleve || "Élève"} / ${cours.prof || "Prof"}`,
          start: new Date(cours.date),
          end: new Date(new Date(cours.date).getTime() + 30 * 60000),
          resource: { lien: cours.lien },
        }));
        setEvents(formatted);
      }
    };

    fetchPlanning();
  }, []);

  const eventStyleGetter = () => ({
    style: {
      backgroundColor: "#0d9488",
      color: "white",
      borderRadius: "8px",
      padding: "4px",
      border: "none",
    },
  });

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">📅 Planning des cours</h2>
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: 500 }}
        eventPropGetter={eventStyleGetter}
        onSelectEvent={(event) => {
          if (event.resource?.lien) {
            window.open(event.resource.lien, "_blank");
          }
        }}
      />
    </div>
  );
}

export default Planning;
/* src/pages/ProfDashboard.css - VERSION ORIGINALE SANS ONGLETS */

.prof-dashboard-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

/* 🆕 Bannière de bienvenue pour nouveaux profs */
.welcome-banner {
  background: linear-gradient(45deg, #10b981, #059669);
  border-radius: 15px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  color: white;
  box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
}

.banner-content {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.banner-icon {
  font-size: 2rem;
  flex-shrink: 0;
}

.banner-text {
  flex: 1;
}

.banner-text h3 {
  margin: 0 0 0.5rem 0;
  font-size: 1.2rem;
  font-weight: 600;
}

.banner-text p {
  margin: 0;
  opacity: 0.9;
  line-height: 1.4;
}

.banner-action {
  flex-shrink: 0;
}

.status-badge {
  background: rgba(255, 255, 255, 0.2);
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  font-weight: 500;
  white-space: nowrap;
  border: 1px solid rgba(255, 255, 255, 0.3);
}

/* Header avec profil */
.dashboard-header {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.prof-welcome {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.prof-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  overflow: hidden;
  border: 4px solid #667eea;
  flex-shrink: 0;
}

.prof-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: white;
}

.welcome-text h1 {
  font-size: 2rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
  font-weight: 700;
}

.welcome-text p {
  color: #6b7280;
  margin-bottom: 0.5rem;
}

.validation-badge {
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  font-size: 0.8rem;
  font-weight: 600;
}

.validation-badge:not(.pending) {
  background: #10b981;
  color: white;
}

.validation-badge.pending {
  background: #f59e0b;
  color: white;
}

/* Stats rapides dans le header */
.quick-stats {
  display: flex;
  gap: 2rem;
}

.stat-item {
  text-align: center;
}

.stat-value {
  font-size: 2rem;
  font-weight: 800;
  color: #667eea;
  margin-bottom: 0.3rem;
}

.stat-label {
  font-size: 0.8rem;
  color: #6b7280;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Grille de statistiques */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stat-card {
  background: white;
  border-radius: 15px;
  padding: 1.5rem;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  gap: 1rem;
  transition: transform 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-3px);
}

.stat-icon {
  font-size: 2.5rem;
  background: linear-gradient(45deg, #667eea, #764ba2);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
}

.stat-content {
  flex: 1;
}

.stat-number {
  font-size: 2rem;
  font-weight: 800;
  color: #2d3748;
  margin-bottom: 0.3rem;
}

.stat-title {
  font-weight: 600;
  color: #4a5568;
  margin-bottom: 0.2rem;
}

.stat-subtitle {
  font-size: 0.8rem;
  color: #9ca3af;
}

/* Actions rapides */
.quick-actions {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.quick-actions h3 {
  color: #2d3748;
  margin-bottom: 1.5rem;
  font-size: 1.3rem;
  font-weight: 600;
}

.actions-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

.action-card {
  background: linear-gradient(135deg, #f8fafc 0%, #edf2f7 100%);
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  padding: 1.5rem;
  text-decoration: none;
  transition: all 0.3s ease;
  display: block;
  cursor: pointer;
}

.action-card:hover:not(.disabled) {
  border-color: #667eea;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
}

/* 🆕 Style pour actions désactivées */
.action-card.disabled {
  opacity: 0.6;
  cursor: not-allowed;
  background: #f5f5f5;
}

.action-card.disabled:hover {
  transform: none;
  box-shadow: none;
  border-color: #e2e8f0;
}

.action-icon {
  font-size: 2rem;
  margin-bottom: 0.8rem;
}

.action-title {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.3rem;
}

.action-subtitle {
  font-size: 0.85rem;
  color: #6b7280;
}

/* Sections avec header */
.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.section-header h3 {
  color: #2d3748;
  font-size: 1.3rem;
  font-weight: 600;
  margin: 0;
}

.view-all {
  color: #667eea;
  text-decoration: none;
  font-weight: 500;
  font-size: 0.9rem;
}

.view-all:hover {
  text-decoration: underline;
}

/* 🆕 Style pour liens désactivés */
.view-all.disabled {
  color: #999;
  cursor: not-allowed;
  text-decoration: none;
}

.view-all.disabled:hover {
  text-decoration: none;
}

/* Prochains cours */
.upcoming-courses {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.courses-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.course-card {
  background: #f8fafc;
  border-radius: 12px;
  padding: 1.5rem;
  border: 1px solid #e2e8f0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.course-time {
  text-align: left;
}

.course-date {
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 0.3rem;
}

.course-status {
  font-size: 0.8rem;
  color: #10b981;
  background: #ecfdf5;
  padding: 0.2rem 0.6rem;
  border-radius: 10px;
  display: inline-block;
}

.course-details {
  text-align: right;
}

.student-name {
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.join-link {
  background: #667eea;
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 8px;
  text-decoration: none;
  font-size: 0.85rem;
  font-weight: 500;
  display: inline-block;
}

.join-link:hover {
  background: #5a67d8;
}

/* Évaluations récentes */
.recent-reviews {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.review-card {
  background: #f8fafc;
  border-radius: 12px;
  padding: 1.5rem;
  border: 1px solid #e2e8f0;
}

.review-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.student-info {
  display: flex;
  align-items: center;
  gap: 0.8rem;
}

.student-info strong {
  color: #2d3748;
}

.stars-display {
  display: flex;
  gap: 0.1rem;
}

.star {
  font-size: 1rem;
}

.star.filled {
  color: #fbbf24;
}

.star:not(.filled) {
  color: #d1d5db;
}

.review-date {
  font-size: 0.8rem;
  color: #9ca3af;
}

.review-comment {
  font-style: italic;
  color: #4b5563;
  margin-bottom: 1rem;
  line-height: 1.5;
}

.review-details {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.detail-rating {
  font-size: 0.8rem;
  color: #6b7280;
  background: #e5e7eb;
  padding: 0.2rem 0.5rem;
  border-radius: 6px;
}

/* États vides */
.empty-state {
  text-align: center;
  padding: 3rem 2rem;
  color: #9ca3af;
}

.empty-state p:first-child {
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
}

/* Footer */
.dashboard-footer {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 2rem;
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.help-section h4 {
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.help-section ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.help-section li {
  padding: 0.3rem 0;
  padding-left: 1.5rem;
  position: relative;
  line-height: 1.4;
  font-size: 0.9rem;
  opacity: 0.9;
}

.help-section li:before {
  content: "💡";
  position: absolute;
  left: 0;
  top: 0.3rem;
}

.logout-btn {
  background: #ef4444;
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
}

.logout-btn:hover {
  background: #dc2626;
  transform: translateY(-2px);
}

/* États de chargement */
.loading-state {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #e2e8f0;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* 🆕 Styles pour messages de chargement améliorés */
.loading-state p {
  margin: 0.5rem 0;
  color: #4a5568;
}

.loading-state p:first-of-type {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2d3748;
}

.loading-state p:last-of-type {
  font-size: 0.9rem;
  color: #6b7280;
  font-style: italic;
}

/* 🆕 COMPATIBILITÉ AVEC LES ONGLETS - Styles minimaux pour que ça marche */
.dashboard-tabs {
  display: none; /* Cache les onglets mais évite les erreurs */
}

.tab-content {
  width: 100%;
}

/* Responsive */
@media (max-width: 768px) {
  .prof-dashboard-container {
    padding: 1rem;
  }

  /* 🆕 Bannière responsive */
  .banner-content {
    flex-direction: column;
    text-align: center;
    gap: 1rem;
  }

  .banner-text h3 {
    font-size: 1.1rem;
  }

  .status-badge {
    margin-top: 0.5rem;
  }

  .dashboard-header {
    flex-direction: column;
    gap: 2rem;
    text-align: center;
  }

  .prof-welcome {
    flex-direction: column;
    text-align: center;
  }

  .quick-stats {
    flex-direction: column;
    gap: 1rem;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .actions-grid {
    grid-template-columns: 1fr;
  }

  .course-card {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }

  .course-details {
    text-align: center;
  }

  .review-header {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }

  .review-details {
    flex-direction: column;
    gap: 0.5rem;
  }

  .dashboard-footer {
    flex-direction: column;
    gap: 2rem;
    text-align: center;
  }
}

/* 🆕 Responsive pour tablettes */
@media (max-width: 1024px) and (min-width: 769px) {
  .banner-content {
    flex-wrap: wrap;
  }

  .quick-stats {
    flex-direction: column;
    gap: 1rem;
  }

  .actions-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}
// src/pages/ProfDashboard.js - VERSION CORRIGÉE sans déconnexions
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { supabase } from "../supabaseClient";
import axios from "axios";
import './ProfDashboard.css';

// 🆕 Composants pour les onglets de réservation
import AvailabilityManagement from "../components/AvailabilityManagement";
import ReservationsDashboard from "../components/ReservationsDashboard";

function ProfDashboard() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [profProfile, setProfProfile] = useState(null);
  const [stats, setStats] = useState({
    totalCours: 0,
    coursAVenir: 0,
    coursFinis: 0,
    evaluations: 0,
    noteMoyenne: 0,
    revenus: 0
  });
  const [prochainsCours, setProchainsCours] = useState([]);
  const [recentEvaluations, setRecentEvaluations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isCreatingProfile, setIsCreatingProfile] = useState(false);
  
  // 🆕 État pour les onglets
  const [activeTab, setActiveTab] = useState('dashboard');

  // 🆕 États pour éviter les rechargements multiples
  const [dataLoaded, setDataLoaded] = useState(false);
  const [profileLoaded, setProfileLoaded] = useState(false);

  // Récupération de la session
  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      if (session) {
        setToken(session.access_token);
      }
    });
  }, []);

  // 🔧 CORRIGÉ : Récupération des données du professeur - UNE SEULE FOIS
  useEffect(() => {
    // 🛡️ PROTECTION : éviter rechargements multiples
    if (!token || profileLoaded || loading || isCreatingProfile) {
      return;
    }

    console.log("🔄 Démarrage fetchProfData - token disponible");
    fetchProfData();
  }, [token]); // 🔧 SUPPRIMÉ session et activeTab des dépendances

  // 🆕 Fonction pour gérer les changements d'onglets sans rechargement
  const handleTabChange = (newTab) => {
    console.log(`🔄 Changement d'onglet vers: ${newTab}`);
    setActiveTab(newTab);
    // Pas de rechargement des données !
  };

  const fetchProfData = async () => {
    // 🛡️ PROTECTION MULTIPLE contre les appels multiples
    if (profileLoaded || !token || loading || isCreatingProfile) {
      console.log("🚫 fetchProfData annulé - déjà en cours ou terminé");
      return;
    }

    console.log("🔍 fetchProfData - début");
    
    try {
      // 1. Récupérer le profil du prof
      console.log("🔍 Récupération profil professeur...");
      const profResponse = await axios.get('http://localhost:3001/profs/me', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (profResponse.data.success && profResponse.data.prof) {
        console.log("✅ Profil professeur récupéré:", profResponse.data.prof);
        setProfProfile(profResponse.data.prof);
        setProfileLoaded(true); // 🆕 Marquer comme chargé
        
        // Charger les données liées seulement si pas encore fait
        if (!dataLoaded) {
          await loadCoursesAndReviews(profResponse.data.prof);
          setDataLoaded(true);
        }
        
      } else if (profResponse.data.success && !profResponse.data.prof) {
        // 🆕 AUCUN PROFIL TROUVÉ - Auto-création
        console.log("🆕 Aucun profil trouvé, création automatique...");
        await createProfesseurProfile();
        
      } else {
        console.log("❌ Erreur récupération profil:", profResponse.data);
        throw new Error("Erreur récupération profil");
      }
      
    } catch (err) {
      console.error("❌ Erreur récupération données prof:", err);
      // 🆕 En cas d'erreur 404, tenter la création automatique
      if (err.response?.status === 404 || err.response?.status === 401) {
        console.log("🔧 Tentative de création automatique suite à erreur...");
        if (!isCreatingProfile) { // Éviter création multiple
          await createProfesseurProfile();
        }
      }
    } finally {
      setLoading(false);
      setIsCreatingProfile(false);
    }
  };

  // 🆕 Fonction pour créer automatiquement un profil professeur
  const createProfesseurProfile = async () => {
    if (isCreatingProfile || profileLoaded) {
      console.log("🚫 Création profil annulée - déjà en cours");
      return; // Éviter les appels multiples
    }
    
    setIsCreatingProfile(true);
    console.log("🛠️ Création automatique du profil professeur...");
    
    try {
      // Extraire le nom depuis les métadonnées ou l'email
      const userMetadata = session?.user?.user_metadata || {};
      const email = session?.user?.email || '';
      
      const nom = userMetadata.full_name || 
                 userMetadata.name || 
                 email.split('@')[0].replace(/[^a-zA-Z0-9]/g, ' ') || 
                 'Professeur';

      const profileData = {
        nom: nom,
        specialite: 'Arabe général',
        bio: `Professeur d'arabe passionné. Rejoint FirstArabic pour partager ses connaissances et aider les élèves à maîtriser la langue arabe.`,
        specialites: ['Arabe général', 'Conversation'],
        langues_parlees: ['Arabe', 'Français'],
        prix_30min: 15.00,
        prix_60min: 25.00,
        experience_annees: 1,
        pays_origine: 'Maroc',
        disponible_maintenant: false
      };

      console.log("📤 Données profil à créer:", profileData);

      const createResponse = await axios.post('http://localhost:3001/profs', profileData, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (createResponse.data.success && createResponse.data.prof) {
        console.log("✅ Profil professeur créé automatiquement:", createResponse.data.prof);
        setProfProfile(createResponse.data.prof);
        setProfileLoaded(true); // 🆕 Marquer comme chargé
        
        // Charger les données liées (cours et avis) - seront vides mais structure prête
        await loadCoursesAndReviews(createResponse.data.prof);
        setDataLoaded(true);
        
        // Message de succès (optionnel)
        console.log("🎉 Bienvenue ! Votre profil professeur a été créé automatiquement.");
        
      } else {
        console.error("❌ Échec création profil:", createResponse.data);
        throw new Error("Échec création profil automatique");
      }
      
    } catch (createError) {
      console.error("❌ Erreur création profil automatique:", createError);
      
      // Fallback : afficher un message d'erreur mais ne pas bloquer l'interface
      setStats({
        totalCours: 0,
        coursAVenir: 0,
        coursFinis: 0,
        evaluations: 0,
        noteMoyenne: 0,
        revenus: 0
      });
      
      // Profil minimal pour éviter les erreurs d'affichage
      setProfProfile({
        nom: session?.user?.email?.split('@')[0] || 'Professeur',
        email: session?.user?.email,
        is_validated: false,
        rating_moyen: 0,
        nombre_avis: 0,
        prix_30min: 15
      });
      setProfileLoaded(true);
    }
  };

  // 🔄 Fonction pour charger cours et évaluations - OPTIMISÉE
  const loadCoursesAndReviews = async (profData) => {
    // 🛡️ Éviter rechargement si données déjà chargées
    if (dataLoaded) {
      console.log("📊 Données déjà chargées, éviter rechargement");
      return;
    }

    console.log("🔍 Chargement cours et évaluations...");

    // 2. Récupérer les cours du prof
    try {
      console.log("🔍 Récupération des cours du prof...");
      const coursResponse = await axios.get('http://localhost:3001/cours', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (coursResponse.data.success) {
        const cours = coursResponse.data.cours || [];
        console.log("✅ Cours récupérés:", cours.length);
        
        // Calculer les statistiques
        const now = new Date();
        const coursAVenir = cours.filter(c => new Date(c.date) > now);
        const coursFinis = cours.filter(c => new Date(c.date) <= now && c.statut === 'terminé');
        
        setProchainsCours(coursAVenir.slice(0, 5));
        
        setStats({
          totalCours: cours.length,
          coursAVenir: coursAVenir.length,
          coursFinis: coursFinis.length,
          evaluations: profData.nombre_avis || 0,
          noteMoyenne: profData.rating_moyen || 0,
          revenus: coursFinis.length * (profData.prix_30min || 15)
        });
      } else {
        console.log("⚠️ Pas de cours trouvés, utilisation des données par défaut");
        setProchainsCours([]);
        setStats({
          totalCours: 0,
          coursAVenir: 0,
          coursFinis: 0,
          evaluations: profData.nombre_avis || 0,
          noteMoyenne: profData.rating_moyen || 0,
          revenus: 0
        });
      }
    } catch (coursError) {
      console.log("⚠️ Erreur récupération cours:", coursError.message);
      setProchainsCours([]);
      setStats({
        totalCours: 0,
        coursAVenir: 0,
        coursFinis: 0,
        evaluations: profData.nombre_avis || 0,
        noteMoyenne: profData.rating_moyen || 0,
        revenus: 0
      });
    }

    // 3. Récupérer les évaluations récentes
    try {
      console.log("🔍 Récupération des évaluations...");
      const reviewsResponse = await axios.get(`http://localhost:3001/reviews/prof/${profData.id}?limit=3`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (reviewsResponse.data.success) {
        console.log("✅ Évaluations récupérées:", reviewsResponse.data.reviews.length);
        setRecentEvaluations(reviewsResponse.data.reviews || []);
      } else {
        console.log("⚠️ Pas d'évaluations trouvées");
        setRecentEvaluations([]);
      }
    } catch (reviewError) {
      console.log("⚠️ Erreur récupération évaluations:", reviewError.message);
      setRecentEvaluations([]);
    }
  };

  const handleLogout = async () => {
    // 🔧 Reset des états avant déconnexion
    setProfileLoaded(false);
    setDataLoaded(false);
    setProfProfile(null);
    setActiveTab('dashboard');
    
    await supabase.auth.signOut();
    window.location.href = "/";
  };

  // Fonction pour formater la date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      weekday: 'short',
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Fonction pour afficher les étoiles
  const StarDisplay = ({ rating, size = 'small' }) => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <span key={i} className={`star ${i <= rating ? 'filled' : ''} ${size}`}>
          ⭐
        </span>
      );
    }
    return <div className="stars-display">{stars}</div>;
  };

  // 🆕 État de chargement amélioré
  if (loading || isCreatingProfile) return (
    <div className="prof-dashboard-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>
          {isCreatingProfile 
            ? "✨ Création de votre profil professeur..." 
            : "Chargement de votre dashboard..."
          }
        </p>
        {isCreatingProfile && (
          <p style={{marginTop: '0.5rem', fontSize: '0.9rem', opacity: 0.8}}>
            Première connexion détectée, initialisation en cours...
          </p>
        )}
      </div>
    </div>
  );

  if (!session) return <p>Veuillez vous connecter</p>;

  return (
    <div className="prof-dashboard-container">
      
      {/* 🆕 Bannière nouveau profil */}
      {profProfile && !profProfile.is_validated && (
        <div className="welcome-banner">
          <div className="banner-content">
            <div className="banner-icon">🎉</div>
            <div className="banner-text">
              <h3>Bienvenue sur FirstArabic !</h3>
              <p>Votre profil professeur a été créé. Il sera visible par les élèves après validation par notre équipe.</p>
            </div>
            <div className="banner-action">
              <span className="status-badge">⏳ En attente de validation</span>
            </div>
          </div>
        </div>
      )}
      
      {/* Header avec profil */}
      <div className="dashboard-header">
        <div className="prof-welcome">
          <div className="prof-avatar">
            {profProfile?.photo_url ? (
              <img src={profProfile.photo_url} alt={profProfile.nom} />
            ) : (
              <div className="avatar-placeholder">👨‍🏫</div>
            )}
          </div>
          <div className="welcome-text">
            <h1>🎓 Bienvenue, {profProfile?.nom || 'Professeur'}</h1>
            <p>Connecté : {session.user.email}</p>
            {profProfile?.is_validated ? (
              <span className="validation-badge">✅ Profil validé</span>
            ) : (
              <span className="validation-badge pending">⏳ En attente de validation</span>
            )}
          </div>
        </div>
        
        <div className="quick-stats">
          <div className="stat-item">
            <div className="stat-value">{stats.noteMoyenne.toFixed(1)}</div>
            <div className="stat-label">⭐ Note moyenne</div>
          </div>
          <div className="stat-item">
            <div className="stat-value">{stats.evaluations}</div>
            <div className="stat-label">📝 Évaluations</div>
          </div>
          <div className="stat-item">
            <div className="stat-value">{stats.revenus}€</div>
            <div className="stat-label">💰 Revenus</div>
          </div>
        </div>
      </div>

      {/* 🆕 Onglets de navigation */}
      <div className="dashboard-tabs">
        <button 
          className={`tab-button ${activeTab === 'dashboard' ? 'active' : ''}`}
          onClick={() => handleTabChange('dashboard')}
        >
          📊 Tableau de bord
        </button>
        <button 
          className={`tab-button ${activeTab === 'disponibilites' ? 'active' : ''}`}
          onClick={() => handleTabChange('disponibilites')}
        >
          🗓️ Mes disponibilités
        </button>
        <button 
          className={`tab-button ${activeTab === 'reservations' ? 'active' : ''}`}
          onClick={() => handleTabChange('reservations')}
        >
          📋 Demandes de cours
        </button>
      </div>

      {/* 🆕 Contenu des onglets */}
      {activeTab === 'dashboard' && (
        <div className="tab-content">
          {/* Statistiques détaillées */}
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-icon">📚</div>
              <div className="stat-content">
                <div className="stat-number">{stats.totalCours}</div>
                <div className="stat-title">Cours donnés</div>
                <div className="stat-subtitle">Au total</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">📅</div>
              <div className="stat-content">
                <div className="stat-number">{stats.coursAVenir}</div>
                <div className="stat-title">Cours à venir</div>
                <div className="stat-subtitle">Cette semaine</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">✅</div>
              <div className="stat-content">
                <div className="stat-number">{stats.coursFinis}</div>
                <div className="stat-title">Cours terminés</div>
                <div className="stat-subtitle">Ce mois-ci</div>
              </div>
            </div>
            
            <div className="stat-card">
              <div className="stat-icon">👥</div>
              <div className="stat-content">
                <div className="stat-number">{new Set(prochainsCours.map(c => c.eleve_id)).size}</div>
                <div className="stat-title">Élèves actifs</div>
                <div className="stat-subtitle">Unique</div>
              </div>
            </div>
          </div>

          {/* Actions rapides */}
          <div className="quick-actions">
            <h3>🚀 Actions rapides</h3>
            <div className="actions-grid">
              <button 
                className="action-card"
                onClick={() => handleTabChange('disponibilites')}
              >
                <div className="action-icon">🗓️</div>
                <div className="action-title">Gérer mes disponibilités</div>
                <div className="action-subtitle">Configurer vos créneaux</div>
              </button>
              
              <button 
                className="action-card"
                onClick={() => handleTabChange('reservations')}
              >
                <div className="action-icon">📋</div>
                <div className="action-title">Voir les demandes</div>
                <div className="action-subtitle">Cours en attente</div>
              </button>
              
              <div className="action-card disabled">
                <div className="action-icon">👤</div>
                <div className="action-title">Modifier mon profil</div>
                <div className="action-subtitle">Bientôt disponible</div>
              </div>
              
              <div className="action-card disabled">
                <div className="action-icon">💰</div>
                <div className="action-title">Mes revenus</div>
                <div className="action-subtitle">Bientôt disponible</div>
              </div>
            </div>
          </div>

          {/* Prochains cours */}
          <div className="upcoming-courses">
            <div className="section-header">
              <h3>📅 Mes prochains cours</h3>
              <Link to="/planning" className="view-all">Voir tout →</Link>
            </div>
            
            {prochainsCours.length === 0 ? (
              <div className="empty-state">
                <p>📭 Aucun cours programmé pour le moment</p>
                <p>Vos prochains cours apparaîtront ici automatiquement</p>
              </div>
            ) : (
              <div className="courses-list">
                {prochainsCours.map((cours) => (
                  <div key={cours.id} className="course-card">
                    <div className="course-time">
                      <div className="course-date">{formatDate(cours.date)}</div>
                      <div className="course-status">{cours.statut}</div>
                    </div>
                    <div className="course-details">
                      <div className="student-name">👤 {cours.eleves?.nom || cours.eleve_nom || 'Élève'}</div>
                      <div className="course-link">
                        {cours.jitsi_url && (
                          <a href={cours.jitsi_url} target="_blank" rel="noopener noreferrer" className="join-link">
                            🎥 Rejoindre le cours
                          </a>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Évaluations récentes */}
          <div className="recent-reviews">
            <div className="section-header">
              <h3>⭐ Évaluations récentes</h3>
              <span className="view-all disabled">Bientôt disponible</span>
            </div>
            
            {recentEvaluations.length === 0 ? (
              <div className="empty-state">
                <p>📝 {stats.evaluations > 0 ? 'Évaluations bientôt visibles' : 'Aucune évaluation pour le moment'}</p>
                <p>{stats.evaluations > 0 ? `Vous avez ${stats.evaluations} évaluation(s) avec une note moyenne de ${stats.noteMoyenne.toFixed(1)}/5` : 'Les avis de vos élèves apparaîtront ici'}</p>
              </div>
            ) : (
              <div className="reviews-list">
                {recentEvaluations.map((review) => (
                  <div key={review.id} className="review-card">
                    <div className="review-header">
                      <div className="student-info">
                        <strong>{review.eleve_nom_anonyme || review.eleve_nom || 'Élève'}</strong>
                        <StarDisplay rating={review.rating} />
                      </div>
                      <div className="review-date">
                        {new Date(review.created_at).toLocaleDateString('fr-FR')}
                      </div>
                    </div>
                    {review.commentaire && (
                      <div className="review-comment">
                        "{review.commentaire}"
                      </div>
                    )}
                    <div className="review-details">
                      {review.pedagogie_rating && (
                        <span className="detail-rating">Pédagogie: {review.pedagogie_rating}/5</span>
                      )}
                      {review.communication_rating && (
                        <span className="detail-rating">Communication: {review.communication_rating}/5</span>
                      )}
                      {review.ponctualite_rating && (
                        <span className="detail-rating">Ponctualité: {review.ponctualite_rating}/5</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Footer actions */}
          <div className="dashboard-footer">
            <div className="help-section">
              <h4>💡 Conseils pour réussir</h4>
              <ul>
                <li>Maintenez un profil à jour avec photo et bio attractive</li>
                <li>Définissez vos disponibilités régulièrement</li>
                <li>Soyez ponctuel et préparez vos cours à l'avance</li>
                <li>Encouragez vos élèves à laisser des avis positifs</li>
              </ul>
            </div>
            
            <button onClick={handleLogout} className="logout-btn">
              🚪 Se déconnecter
            </button>
          </div>
        </div>
      )}

      {/* 🆕 Onglet Disponibilités */}
      {activeTab === 'disponibilites' && (
        <div className="tab-content">
          <AvailabilityManagement />
        </div>
      )}

      {/* 🆕 Onglet Réservations */}
      {activeTab === 'reservations' && (
        <div className="tab-content">
          <ReservationsDashboard />
        </div>
      )}
    </div>
  );
}

export default ProfDashboard;
// src/pages/ProfessorDashboard.js - Dashboard complet pour professeurs
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { supabase } from "../supabaseClient";
import axios from "axios";
import './ProfDashboard.css';

function ProfDashboard() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [profProfile, setProfProfile] = useState(null);
  const [stats, setStats] = useState({
    totalCours: 0,
    coursAVenir: 0,
    coursFinis: 0,
    evaluations: 0,
    noteMoyenne: 0,
    revenus: 0
  });
  const [prochainsCours, setProchainsCours] = useState([]);
  const [recentEvaluations, setRecentEvaluations] = useState([]);
  const [loading, setLoading] = useState(true);

  // Récupération de la session
  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      if (session) {
        setToken(session.access_token);
      }
    });
  }, []);

  // Récupération des données du professeur
  useEffect(() => {
    const fetchProfData = async () => {
      if (!token) return;

      try {
        // 1. Récupérer le profil du prof
        const profResponse = await axios.get('http://localhost:3001/profs/me', {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (profResponse.data.success && profResponse.data.prof) {
          setProfProfile(profResponse.data.prof);

          // 2. Récupérer les cours du prof
          const coursResponse = await axios.get('http://localhost:3001/cours', {
            headers: { Authorization: `Bearer ${token}` }
          });

          if (coursResponse.data.success) {
            const cours = coursResponse.data.cours || [];
            
            // Calculer les statistiques
            const now = new Date();
            const coursAVenir = cours.filter(c => new Date(c.date) > now);
            const coursFinis = cours.filter(c => new Date(c.date) <= now && c.statut === 'terminé');
            
            setProchainsCours(coursAVenir.slice(0, 5)); // 5 prochains cours
            
            setStats({
              totalCours: cours.length,
              coursAVenir: coursAVenir.length,
              coursFinis: coursFinis.length,
              evaluations: profResponse.data.prof.nombre_avis || 0,
              noteMoyenne: profResponse.data.prof.rating_moyen || 0,
              revenus: coursFinis.length * (profResponse.data.prof.prix_30min || 15)
            });
          }

          // 3. Récupérer les évaluations récentes
          const reviewsResponse = await axios.get(`http://localhost:3001/reviews/prof/${profResponse.data.prof.id}?limit=3`, {
            headers: { Authorization: `Bearer ${token}` }
          });

          if (reviewsResponse.data.success) {
            setRecentEvaluations(reviewsResponse.data.reviews || []);
          }
        }
      } catch (err) {
        console.error("Erreur récupération données prof:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchProfData();
  }, [token]);

  const handleLogout = async () => {
    await supabase.auth.signOut();
    window.location.href = "/";
  };

  // Fonction pour formater la date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      weekday: 'short',
      day: 'numeric',
      month: 'short',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Fonction pour afficher les étoiles
  const StarDisplay = ({ rating, size = 'small' }) => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <span key={i} className={`star ${i <= rating ? 'filled' : ''} ${size}`}>
          ⭐
        </span>
      );
    }
    return <div className="stars-display">{stars}</div>;
  };

  if (loading) return (
    <div className="prof-dashboard-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>Chargement de votre dashboard...</p>
      </div>
    </div>
  );

  if (!session) return <p>Veuillez vous connecter</p>;

  return (
    <div className="prof-dashboard-container">
      
      {/* Header avec profil */}
      <div className="dashboard-header">
        <div className="prof-welcome">
          <div className="prof-avatar">
            {profProfile?.photo_url ? (
              <img src={profProfile.photo_url} alt={profProfile.nom} />
            ) : (
              <div className="avatar-placeholder">👨‍🏫</div>
            )}
          </div>
          <div className="welcome-text">
            <h1>🎓 Bienvenue, {profProfile?.nom || 'Professeur'}</h1>
            <p>Connecté : {session.user.email}</p>
            {profProfile?.is_validated ? (
              <span className="validation-badge">✅ Profil validé</span>
            ) : (
              <span className="validation-badge pending">⏳ En attente de validation</span>
            )}
          </div>
        </div>
        
        <div className="quick-stats">
          <div className="stat-item">
            <div className="stat-value">{stats.noteMoyenne.toFixed(1)}</div>
            <div className="stat-label">⭐ Note moyenne</div>
          </div>
          <div className="stat-item">
            <div className="stat-value">{stats.evaluations}</div>
            <div className="stat-label">📝 Évaluations</div>
          </div>
          <div className="stat-item">
            <div className="stat-value">{stats.revenus}€</div>
            <div className="stat-label">💰 Revenus</div>
          </div>
        </div>
      </div>

      {/* Statistiques détaillées */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">📚</div>
          <div className="stat-content">
            <div className="stat-number">{stats.totalCours}</div>
            <div className="stat-title">Cours donnés</div>
            <div className="stat-subtitle">Au total</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">📅</div>
          <div className="stat-content">
            <div className="stat-number">{stats.coursAVenir}</div>
            <div className="stat-title">Cours à venir</div>
            <div className="stat-subtitle">Cette semaine</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">✅</div>
          <div className="stat-content">
            <div className="stat-number">{stats.coursFinis}</div>
            <div className="stat-title">Cours terminés</div>
            <div className="stat-subtitle">Ce mois-ci</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon">👥</div>
          <div className="stat-content">
            <div className="stat-number">{new Set(prochainsCours.map(c => c.eleve_id)).size}</div>
            <div className="stat-title">Élèves actifs</div>
            <div className="stat-subtitle">Unique</div>
          </div>
        </div>
      </div>

      {/* Actions rapides */}
      <div className="quick-actions">
        <h3>🚀 Actions rapides</h3>
        <div className="actions-grid">
          <Link to="/prof/disponibilites" className="action-card">
            <div className="action-icon">🗓️</div>
            <div className="action-title">Gérer mes disponibilités</div>
            <div className="action-subtitle">Définir mes créneaux libres</div>
          </Link>
          
          <Link to="/prof/profile" className="action-card">
            <div className="action-icon">👤</div>
            <div className="action-title">Modifier mon profil</div>
            <div className="action-subtitle">Photo, bio, spécialités</div>
          </Link>
          
          <Link to={`/professeur/${profProfile?.id}`} className="action-card">
            <div className="action-icon">👁️</div>
            <div className="action-title">Voir mon profil public</div>
            <div className="action-subtitle">Ce que voient les élèves</div>
          </Link>
          
          <Link to="/prof/revenus" className="action-card">
            <div className="action-icon">💰</div>
            <div className="action-title">Mes revenus</div>
            <div className="action-subtitle">Historique et paiements</div>
          </Link>
        </div>
      </div>

      {/* Prochains cours */}
      <div className="upcoming-courses">
        <div className="section-header">
          <h3>📅 Mes prochains cours</h3>
          <Link to="/planning" className="view-all">Voir tout →</Link>
        </div>
        
        {prochainsCours.length === 0 ? (
          <div className="empty-state">
            <p>📭 Aucun cours programmé pour le moment</p>
            <p>Vos prochains cours apparaîtront ici automatiquement</p>
          </div>
        ) : (
          <div className="courses-list">
            {prochainsCours.map((cours) => (
              <div key={cours.id} className="course-card">
                <div className="course-time">
                  <div className="course-date">{formatDate(cours.date)}</div>
                  <div className="course-status">{cours.statut}</div>
                </div>
                <div className="course-details">
                  <div className="student-name">👤 {cours.eleve_nom}</div>
                  <div className="course-link">
                    {cours.jitsi_url && (
                      <a href={cours.jitsi_url} target="_blank" rel="noopener noreferrer" className="join-link">
                        🎥 Rejoindre le cours
                      </a>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Évaluations récentes */}
      <div className="recent-reviews">
        <div className="section-header">
          <h3>⭐ Évaluations récentes</h3>
          <Link to={`/reviews/prof/${profProfile?.id}`} className="view-all">Voir toutes →</Link>
        </div>
        
        {recentEvaluations.length === 0 ? (
          <div className="empty-state">
            <p>📝 Aucune évaluation pour le moment</p>
            <p>Les avis de vos élèves apparaîtront ici</p>
          </div>
        ) : (
          <div className="reviews-list">
            {recentEvaluations.map((review) => (
              <div key={review.id} className="review-card">
                <div className="review-header">
                  <div className="student-info">
                    <strong>{review.eleve_nom_anonyme || 'Élève'}</strong>
                    <StarDisplay rating={review.rating} />
                  </div>
                  <div className="review-date">
                    {new Date(review.created_at).toLocaleDateString('fr-FR')}
                  </div>
                </div>
                {review.commentaire && (
                  <div className="review-comment">
                    "{review.commentaire}"
                  </div>
                )}
                <div className="review-details">
                  {review.pedagogie_rating && (
                    <span className="detail-rating">Pédagogie: {review.pedagogie_rating}/5</span>
                  )}
                  {review.communication_rating && (
                    <span className="detail-rating">Communication: {review.communication_rating}/5</span>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Footer actions */}
      <div className="dashboard-footer">
        <div className="help-section">
          <h4>💡 Conseils pour réussir</h4>
          <ul>
            <li>Maintenez un profil à jour avec photo et bio attractive</li>
            <li>Définissez vos disponibilités régulièrement</li>
            <li>Soyez ponctuel et préparez vos cours à l'avance</li>
            <li>Encouragez vos élèves à laisser des avis positifs</li>
          </ul>
        </div>
        
        <button onClick={handleLogout} className="logout-btn">
          🚪 Se déconnecter
        </button>
      </div>
    </div>
  );
}

export default ProfDashboard;
/* src/pages/ProfesseurDetail.css - VERSION FINALE CORRIGÉE */

.professor-detail-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  padding-bottom: 8rem; /* Espace pour le CTA fixe */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

/* Navigation breadcrumb */
.breadcrumb {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 2rem;
  color: white;
  font-size: 0.9rem;
}

.breadcrumb a {
  color: white;
  text-decoration: none;
  opacity: 0.8;
  transition: opacity 0.3s ease;
}

.breadcrumb a:hover {
  opacity: 1;
  text-decoration: underline;
}

.breadcrumb span:last-child {
  font-weight: 600;
}

/* Header principal */
.professor-header {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.professor-main-info {
  display: flex;
  gap: 1.5rem;
  align-items: flex-start;
  flex-wrap: wrap;
}

.professor-avatar-large {
  position: relative;
  width: 150px;
  height: 150px;
  border-radius: 50%;
  overflow: hidden;
  border: 4px solid #667eea;
  flex-shrink: 0;
}

.professor-avatar-large img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 3rem;
  color: white;
}

.online-indicator {
  position: absolute;
  bottom: 10px;
  right: 10px;
  background: #10b981;
  color: white;
  padding: 0.3rem 0.6rem;
  border-radius: 15px;
  font-size: 0.7rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 0.3rem;
}

.online-dot {
  width: 6px;
  height: 6px;
  background: white;
  border-radius: 50%;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.professor-info {
  flex: 1;
  min-width: 300px;
}

.professor-info h1 {
  font-size: 2rem;
  font-weight: 800;
  color: #2d3748;
  margin-bottom: 1rem;
  word-break: break-word;
}

/* Stats principales - VERSION CORRIGÉE */
.main-stats {
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  margin-bottom: 1.5rem;
  align-items: center;
}

.stat-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-width: 0;
}

.stat-number {
  font-size: 1.3rem;
  font-weight: 700;
  color: #667eea;
}

.stat-label {
  color: #6b7280;
  font-size: 0.9rem;
}

.stars-display {
  display: flex;
  align-items: center;
  gap: 0.2rem;
}

.star {
  font-size: 1.2rem;
}

.star.large {
  font-size: 1.5rem;
}

.star.filled {
  color: #fbbf24;
}

.star.empty {
  color: #d1d5db;
}

.star.half {
  color: #fbbf24;
  opacity: 0.7;
}

.rating-number {
  margin-left: 0.5rem;
  font-weight: 600;
  color: #374151;
}

/* Prix et action - VERSION CORRIGÉE */
.price-and-action {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1rem;
}

.price-display {
  display: flex;
  align-items: baseline;
  gap: 0.3rem;
}

.price-amount {
  font-size: 1.8rem;
  font-weight: 800;
  color: #667eea;
}

.price-duration {
  color: #6b7280;
  font-size: 1rem;
}

.btn-book-now {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  padding: 0.8rem 1.5rem;
  border-radius: 12px;
  text-decoration: none;
  font-weight: 600;
  transition: all 0.3s ease;
  font-size: 1rem;
  white-space: nowrap;
}

.btn-book-now:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.last-seen {
  color: #6b7280;
  font-size: 0.9rem;
}

/* Grille des détails */
.professor-details-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
}

.professor-left-column,
.professor-right-column {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Sections d'informations */
.info-section {
  background: white;
  border-radius: 15px;
  padding: 1.5rem;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.info-section h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 1rem;
}

.bio-text {
  line-height: 1.6;
  color: #4a5568;
}

.specialties-list,
.languages-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.specialty-chip,
.language-chip {
  background: #eff6ff;
  color: #1d4ed8;
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.9rem;
  font-weight: 500;
  border: 1px solid #bfdbfe;
}

.video-container {
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Section des avis */
.reviews-stats {
  background: white;
  border-radius: 15px;
  padding: 1.5rem;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.reviews-stats h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 1rem;
}

.stats-grid {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.stat-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem;
  background: #f8fafc;
  border-radius: 8px;
}

.stat-row .stat-label {
  font-weight: 500;
  color: #4a5568;
}

.stat-row .stat-value {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
  color: #2d3748;
}

.reviews-section {
  background: white;
  border-radius: 15px;
  padding: 1.5rem;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.reviews-section h3 {
  font-size: 1.2rem;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 1.5rem;
}

.no-reviews {
  text-align: center;
  padding: 2rem;
  color: #6b7280;
}

.reviews-list {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.review-item {
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  padding: 1.5rem;
  background: #fafafa;
}

.review-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.reviewer-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.reviewer-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
}

.reviewer-details {
  display: flex;
  flex-direction: column;
}

.reviewer-name {
  font-weight: 600;
  color: #2d3748;
}

.review-date {
  font-size: 0.8rem;
  color: #6b7280;
}

.review-comment {
  margin: 1rem 0;
}

.review-comment p {
  font-style: italic;
  color: #4a5568;
  line-height: 1.6;
  margin: 0;
}

.review-details {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-top: 0.75rem;
}

.detail-rating {
  background: #e5e7eb;
  color: #374151;
  padding: 0.25rem 0.5rem;
  border-radius: 6px;
  font-size: 0.8rem;
  font-weight: 500;
}

.load-more-btn {
  background: #f7fafc;
  border: 2px solid #e2e8f0;
  color: #4a5568;
  padding: 0.75rem 1.5rem;
  border-radius: 10px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
  margin-top: 1rem;
}

.load-more-btn:hover {
  background: #edf2f7;
  border-color: #cbd5e0;
}

/* CTA fixe en bas */
.bottom-cta {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: white;
  border-top: 1px solid #e2e8f0;
  padding: 1rem 2rem;
  box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
  z-index: 1000;
}

.cta-content {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.cta-info {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.cta-price {
  font-size: 1.2rem;
  font-weight: 700;
  color: #667eea;
}

.cta-book-btn {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  padding: 1rem 2rem;
  border-radius: 12px;
  text-decoration: none;
  font-weight: 600;
  transition: all 0.3s ease;
  font-size: 1rem;
}

.cta-book-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

/* États de chargement et erreur */
.loading-state,
.error-state {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #e2e8f0;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.error-state h2 {
  color: #ef4444;
  margin-bottom: 1rem;
}

.error-state p {
  color: #6b7280;
  margin-bottom: 1.5rem;
}

.btn-secondary {
  background: #f7fafc;
  color: #4a5568;
  padding: 0.75rem 1.5rem;
  border-radius: 12px;
  text-decoration: none;
  font-weight: 500;
  border: 2px solid #e2e8f0;
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  background: #edf2f7;
  border-color: #cbd5e0;
}

/* Responsive pour écrans moyens */
@media (max-width: 1024px) {
  .professor-main-info {
    flex-direction: column;
    gap: 1.5rem;
    text-align: center;
  }

  .main-stats {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .price-and-action {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  .professor-details-grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
}

/* Responsive pour mobiles */
@media (max-width: 768px) {
  .professor-detail-container {
    padding: 1rem;
    padding-bottom: 8rem;
  }

  .professor-avatar-large {
    width: 120px;
    height: 120px;
  }

  .professor-info h1 {
    font-size: 1.8rem;
  }

  .stat-number {
    font-size: 1.1rem;
  }

  .price-amount {
    font-size: 1.5rem;
  }

  .reviews-stats .stats-grid {
    gap: 0.5rem;
  }

  .stat-row {
    flex-direction: column;
    gap: 0.5rem;
    text-align: center;
  }

  .review-header {
    flex-direction: column;
    gap: 0.75rem;
    align-items: flex-start;
  }

  .review-details {
    flex-direction: column;
    gap: 0.5rem;
  }

  .cta-content {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }

  .cta-info {
    flex-direction: column;
    gap: 0.5rem;
  }

  .bottom-cta {
    padding: 1rem;
  }

  .breadcrumb {
    font-size: 0.8rem;
    margin-bottom: 1rem;
  }
}
// src/pages/ProfesseurDetail.js - Page de profil détaillé du professeur
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import axios from 'axios';
import './ProfesseurDetail.css';

function ProfesseurDetail() {
  const { id } = useParams(); // ID du professeur dans l'URL
  const navigate = useNavigate();
  const [professor, setProfessor] = useState(null);
  const [reviews, setReviews] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [reviewsPage, setReviewsPage] = useState(0);
  const [hasMoreReviews, setHasMoreReviews] = useState(true);

  // Récupérer les données du professeur et ses avis
  useEffect(() => {
    const fetchProfessorData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          setError("Veuillez vous connecter");
          return;
        }

        console.log("🔍 Récupération données prof ID:", id);

        // 1. Récupérer les infos du professeur
        const profResponse = await axios.get('http://localhost:3001/profs', {
          headers: { Authorization: `Bearer ${session.access_token}` }
        });

        if (profResponse.data.success) {
          const foundProf = profResponse.data.profs.find(p => p.id === id);
          if (!foundProf) {
            setError("Professeur non trouvé");
            return;
          }
          console.log("✅ Professeur trouvé:", foundProf);
          setProfessor(foundProf);
        }

        // 2. Récupérer les avis du professeur
        try {
          const reviewsResponse = await axios.get(`http://localhost:3001/reviews/prof/${id}?limit=10&offset=0`, {
            headers: { Authorization: `Bearer ${session.access_token}` }
          });

          if (reviewsResponse.data.success) {
            console.log("✅ Avis récupérés:", reviewsResponse.data.reviews.length);
            setReviews(reviewsResponse.data.reviews);
            setStats(reviewsResponse.data.stats);
            setHasMoreReviews(reviewsResponse.data.pagination?.has_more || false);
          }
        } catch (reviewError) {
          console.log("⚠️ Erreur récupération avis:", reviewError.message);
          setReviews([]);
        }

      } catch (err) {
        console.error("❌ Erreur récupération données:", err);
        setError("Erreur lors du chargement du profil");
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchProfessorData();
    }
  }, [id]);

  // Fonction pour charger plus d'avis
  const loadMoreReviews = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const nextPage = reviewsPage + 1;
      
      const response = await axios.get(`http://localhost:3001/reviews/prof/${id}?limit=10&offset=${nextPage * 10}`, {
        headers: { Authorization: `Bearer ${session.access_token}` }
      });

      if (response.data.success && response.data.reviews.length > 0) {
        setReviews(prev => [...prev, ...response.data.reviews]);
        setReviewsPage(nextPage);
        setHasMoreReviews(response.data.pagination?.has_more || false);
      } else {
        setHasMoreReviews(false);
      }
    } catch (err) {
      console.error("Erreur chargement avis supplémentaires:", err);
    }
  };

  // Fonction pour afficher les étoiles
  const StarDisplay = ({ rating, size = 'normal', showNumber = false }) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 1; i <= 5; i++) {
      if (i <= fullStars) {
        stars.push(<span key={i} className={`star filled ${size}`}>⭐</span>);
      } else if (i === fullStars + 1 && hasHalfStar) {
        stars.push(<span key={i} className={`star half ${size}`}>⭐</span>);
      } else {
        stars.push(<span key={i} className={`star empty ${size}`}>☆</span>);
      }
    }
    
    return (
      <div className="stars-display">
        {stars}
        {showNumber && <span className="rating-number">({rating.toFixed(1)})</span>}
      </div>
    );
  };

  // Fonction pour formater la date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Fonction pour calculer le temps depuis dernière connexion
  const getLastSeenText = (lastConnection) => {
    if (!lastConnection) return 'Jamais connecté';
    
    const now = new Date();
    const last = new Date(lastConnection);
    const diffMinutes = Math.round((now - last) / (1000 * 60));
    
    if (diffMinutes < 5) return 'En ligne maintenant';
    if (diffMinutes < 60) return `Il y a ${diffMinutes} min`;
    if (diffMinutes < 1440) return `Il y a ${Math.round(diffMinutes / 60)}h`;
    return `Il y a ${Math.round(diffMinutes / 1440)} jour(s)`;
  };

  if (loading) return (
    <div className="professor-detail-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>Chargement du profil...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="professor-detail-container">
      <div className="error-state">
        <h2>❌ Erreur</h2>
        <p>{error}</p>
        <Link to="/professeurs" className="btn-secondary">← Retour aux professeurs</Link>
      </div>
    </div>
  );

  if (!professor) return (
    <div className="professor-detail-container">
      <div className="error-state">
        <h2>❌ Professeur non trouvé</h2>
        <Link to="/professeurs" className="btn-secondary">← Retour aux professeurs</Link>
      </div>
    </div>
  );

  return (
    <div className="professor-detail-container">
      
      {/* Navigation */}
      <div className="breadcrumb">
        <Link to="/professeurs">Professeurs</Link>
        <span>›</span>
        <span>{professor.nom}</span>
      </div>

      {/* Header avec profil principal */}
      <div className="professor-header">
        <div className="professor-main-info">
          <div className="professor-avatar-large">
            {professor.photo_url ? (
              <img src={professor.photo_url} alt={professor.nom} />
            ) : (
              <div className="avatar-placeholder">👨‍🏫</div>
            )}
            
            {/* Badge statut en ligne */}
            {(professor.disponible_maintenant || professor.is_online) && (
              <div className="online-indicator">
                <div className="online-dot"></div>
                En ligne
              </div>
            )}
          </div>

          <div className="professor-info">
            <h1>{professor.nom}</h1>
            
            {/* Stats principales */}
            <div className="main-stats">
              <div className="stat-item">
                <StarDisplay rating={professor.rating_moyen || 4.5} size="large" showNumber />
              </div>
              <div className="stat-item">
                <span className="stat-number">{professor.nombre_avis || 0}</span>
                <span className="stat-label">avis</span>
              </div>
              <div className="stat-item">
                <span className="stat-number">{professor.experience_annees || 1}+</span>
                <span className="stat-label">ans d'expérience</span>
              </div>
            </div>

            {/* Prix et action */}
            <div className="price-and-action">
              <div className="price-display">
                <span className="price-amount">{professor.prix_30min || 15}€</span>
                <span className="price-duration">/ 30 min</span>
              </div>
              <Link
                to={`/reservation?prof_id=${professor.id}`}
                className="btn-book-now"
              >
                📅 Réserver maintenant
              </Link>
            </div>

            {/* Dernière connexion */}
            {professor.derniere_connexion && (
              <div className="last-seen">
                🕒 {getLastSeenText(professor.derniere_connexion)}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Section informations détaillées */}
      <div className="professor-details-grid">
        
        {/* Colonne gauche - Infos */}
        <div className="professor-left-column">
          
          {/* Bio */}
          {professor.bio && (
            <div className="info-section">
              <h3>📝 À propos</h3>
              <p className="bio-text">{professor.bio}</p>
            </div>
          )}

          {/* Spécialités */}
          <div className="info-section">
            <h3>🎯 Spécialités</h3>
            <div className="specialties-list">
              {(professor.specialites || [professor.specialite]).filter(Boolean).map((spec, index) => (
                <span key={index} className="specialty-chip">{spec}</span>
              ))}
            </div>
          </div>

          {/* Langues */}
          <div className="info-section">
            <h3>🌍 Langues parlées</h3>
            <div className="languages-list">
              {(professor.langues_parlees || ['Arabe']).map((lang, index) => (
                <span key={index} className="language-chip">{lang}</span>
              ))}
            </div>
          </div>

          {/* Pays d'origine */}
          {professor.pays_origine && (
            <div className="info-section">
              <h3>📍 Pays d'origine</h3>
              <p>{professor.pays_origine}</p>
            </div>
          )}

          {/* Vidéo d'introduction */}
          {professor.video_intro_url && (
            <div className="info-section">
              <h3>🎥 Vidéo d'introduction</h3>
              <div className="video-container">
                <video controls width="100%">
                  <source src={professor.video_intro_url} type="video/mp4" />
                  Votre navigateur ne supporte pas la vidéo.
                </video>
              </div>
            </div>
          )}
        </div>

        {/* Colonne droite - Avis */}
        <div className="professor-right-column">
          
          {/* Statistiques des avis */}
          {stats && stats.rating_moyen > 0 && (
            <div className="reviews-stats">
              <h3>📊 Statistiques des avis</h3>
              <div className="stats-grid">
                <div className="stat-row">
                  <span className="stat-label">Note générale</span>
                  <div className="stat-value">
                    <StarDisplay rating={stats.rating_moyen} />
                    <span>{stats.rating_moyen.toFixed(1)}</span>
                  </div>
                </div>
                {stats.rating_pedagogie && (
                  <div className="stat-row">
                    <span className="stat-label">Pédagogie</span>
                    <div className="stat-value">
                      <StarDisplay rating={stats.rating_pedagogie} />
                      <span>{stats.rating_pedagogie.toFixed(1)}</span>
                    </div>
                  </div>
                )}
                {stats.rating_communication && (
                  <div className="stat-row">
                    <span className="stat-label">Communication</span>
                    <div className="stat-value">
                      <StarDisplay rating={stats.rating_communication} />
                      <span>{stats.rating_communication.toFixed(1)}</span>
                    </div>
                  </div>
                )}
                {stats.rating_ponctualite && (
                  <div className="stat-row">
                    <span className="stat-label">Ponctualité</span>
                    <div className="stat-value">
                      <StarDisplay rating={stats.rating_ponctualite} />
                      <span>{stats.rating_ponctualite.toFixed(1)}</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Liste des avis */}
          <div className="reviews-section">
            <h3>💬 Avis des élèves ({reviews.length})</h3>
            
            {reviews.length === 0 ? (
              <div className="no-reviews">
                <p>📝 Aucun avis pour le moment</p>
                <p>Soyez le premier à laisser un avis sur ce professeur !</p>
              </div>
            ) : (
              <div className="reviews-list">
                {reviews.map((review) => (
                  <div key={review.id} className="review-item">
                    <div className="review-header">
                      <div className="reviewer-info">
                        <div className="reviewer-avatar">
                          {review.eleve_nom ? review.eleve_nom.charAt(0).toUpperCase() : 'É'}
                        </div>
                        <div className="reviewer-details">
                          <span className="reviewer-name">{review.eleve_nom_anonyme || 'Élève vérifié'}</span>
                          <span className="review-date">{formatDate(review.created_at)}</span>
                        </div>
                      </div>
                      <StarDisplay rating={review.rating} />
                    </div>
                    
                    {review.commentaire && (
                      <div className="review-comment">
                        <p>"{review.commentaire}"</p>
                      </div>
                    )}
                    
                    {(review.pedagogie_rating || review.communication_rating || review.ponctualite_rating) && (
                      <div className="review-details">
                        {review.pedagogie_rating && (
                          <span className="detail-rating">Pédagogie: {review.pedagogie_rating}/5</span>
                        )}
                        {review.communication_rating && (
                          <span className="detail-rating">Communication: {review.communication_rating}/5</span>
                        )}
                        {review.ponctualite_rating && (
                          <span className="detail-rating">Ponctualité: {review.ponctualite_rating}/5</span>
                        )}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            {/* Bouton charger plus */}
            {hasMoreReviews && (
              <button onClick={loadMoreReviews} className="load-more-btn">
                Voir plus d'avis
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Call-to-action fixe en bas */}
      <div className="bottom-cta">
        <div className="cta-content">
          <div className="cta-info">
            <span className="cta-price">{professor.prix_30min || 15}€ / 30 min</span>
            <StarDisplay rating={professor.rating_moyen || 4.5} showNumber />
          </div>
          <Link
            to={`/reservation?prof_id=${professor.id}`}
            className="cta-book-btn"
          >
            📅 Réserver un cours avec {professor.nom}
          </Link>
        </div>
      </div>
    </div>
  );
}

export default ProfesseurDetail;
/* src/pages/Professeurs.css - VERSION COMPLÈTE avec avis */

.professors-container {
  min-height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Header */
.professors-header {
  text-align: center;
  margin-bottom: 3rem;
  color: white;
}

.professors-header h1 {
  font-size: 3rem;
  font-weight: 800;
  margin-bottom: 1rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.professors-header p {
  font-size: 1.2rem;
  opacity: 0.9;
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.6;
}

/* Section des filtres */
.filters-section {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.filters-grid {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.search-box input {
  width: 100%;
  padding: 1rem;
  border: 2px solid #e1e5e9;
  border-radius: 12px;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.search-box input:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.filters-grid select {
  padding: 1rem;
  border: 2px solid #e1e5e9;
  border-radius: 12px;
  background: white;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.filters-grid select:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.filters-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 1.5rem;
  border-top: 1px solid #e1e5e9;
}

.checkbox-option {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.9rem;
  color: #4a5568;
}

.checkbox-option input {
  margin-right: 0.5rem;
  transform: scale(1.2);
  accent-color: #667eea;
}

.results-count {
  font-size: 0.9rem;
  color: #718096;
  font-weight: 500;
}

/* Grille des professeurs */
.professors-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 2rem;
  margin-bottom: 3rem;
}

/* Carte professeur */
.professor-card {
  background: white;
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  position: relative;
}

.professor-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
}

/* Photo professeur */
.professor-photo {
  position: relative;
  height: 200px;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
}

.professor-photo img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.photo-placeholder {
  font-size: 4rem;
  color: white;
}

/* Badges */
.online-badge {
  position: absolute;
  top: 1rem;
  right: 1rem;
  background: #10b981;
  color: white;
  padding: 0.5rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  display: flex;
  align-items: center;
}

.online-dot {
  width: 8px;
  height: 8px;
  background: white;
  border-radius: 50%;
  margin-right: 0.5rem;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.video-badge {
  position: absolute;
  bottom: 1rem;
  left: 1rem;
  background: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 0.3rem 0.6rem;
  border-radius: 8px;
  font-size: 0.7rem;
  font-weight: 500;
}

/* Contenu carte */
.professor-content {
  padding: 1.5rem;
}

/* Header avec badge - VERSION AMÉLIORÉE */
.professor-header-card {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 0.75rem;
}

.name-section {
  flex: 1;
}

.name-section h3 {
  margin: 0 0 0.25rem 0;
  font-size: 1.2rem;
  color: #1f2937;
  font-weight: 700;
}

.price-info {
  text-align: right;
  background: #eff6ff;
  padding: 0.5rem 0.75rem;
  border-radius: 8px;
  border: 1px solid #bfdbfe;
  min-width: 70px;
}

.price {
  font-size: 1.1rem;
  font-weight: 700;
  color: #1d4ed8;
  margin-bottom: 0.1rem;
}

.duration {
  font-size: 0.75rem;
  color: #6b7280;
}

/* === NOUVEAUX STYLES POUR LES AVIS === */

/* Étoiles */
.stars-display {
  display: flex;
  gap: 2px;
  align-items: center;
}

.star {
  font-size: 1rem;
  line-height: 1;
}

.star.filled {
  color: #fbbf24;
}

.star.empty {
  color: #d1d5db;
}

.star.half {
  color: #fbbf24;
  opacity: 0.7;
}

/* Stats des professeurs - VERSION AMÉLIORÉE */
.professor-stats {
  background: #f8fafc;
  padding: 0.75rem;
  border-radius: 8px;
  margin: 1rem 0;
  border-left: 3px solid #3b82f6;
}

.rating-section {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}

.rating-text {
  font-size: 0.9rem;
  font-weight: 600;
  color: #374151;
}

.experience {
  font-size: 0.85rem;
  color: #6b7280;
  font-weight: 500;
}

/* Badges d'évaluation */
.badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-left: 0.5rem;
}

.badge.recommended {
  background: linear-gradient(45deg, #10b981, #059669);
  color: white;
  box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);
}

.badge.popular {
  background: linear-gradient(45deg, #f59e0b, #d97706);
  color: white;
  box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);
}

.badge.new {
  background: linear-gradient(45deg, #3b82f6, #2563eb);
  color: white;
  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
}

.badge.verified {
  background: linear-gradient(45deg, #8b5cf6, #7c3aed);
  color: white;
  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);
}

/* Spécialités */
.specialties {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.specialty-tag {
  background: #edf2f7;
  color: #4a5568;
  padding: 0.3rem 0.8rem;
  border-radius: 15px;
  font-size: 0.8rem;
  font-weight: 500;
}

/* Bio */
.professor-bio {
  font-size: 0.9rem;
  color: #718096;
  line-height: 1.5;
  margin-bottom: 1rem;
}

/* Détails professeur */
.professor-details {
  display: flex;
  justify-content: space-between;
  font-size: 0.8rem;
  color: #a0aec0;
  margin-bottom: 0.5rem;
}

.last-seen {
  font-size: 0.8rem;
  color: #a0aec0;
  margin-bottom: 1.5rem;
}

/* Actions */
.professor-actions {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.btn-primary {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  padding: 0.75rem 1rem;
  border-radius: 12px;
  text-decoration: none;
  text-align: center;
  font-weight: 600;
  transition: all 0.3s ease;
  border: none;
  cursor: pointer;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.btn-secondary {
  background: #f7fafc;
  color: #4a5568;
  padding: 0.6rem 1rem;
  border-radius: 12px;
  text-decoration: none;
  text-align: center;
  font-weight: 500;
  border: 2px solid #e1e5e9;
  cursor: pointer;
  transition: all 0.3s ease;
}

.btn-secondary:hover {
  background: #edf2f7;
  border-color: #cbd5e0;
}

/* États de chargement */
.loading-state, .error-state {
  text-align: center;
  padding: 4rem 2rem;
  color: white;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-top: 4px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Aucun résultat */
.no-results {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.no-results-icon {
  font-size: 4rem;
  margin-bottom: 1rem;
}

.no-results h3 {
  font-size: 1.5rem;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.no-results p {
  color: #718096;
}

/* Footer avec stats - VERSION AMÉLIORÉE */
.professors-footer {
  background: white;
  border-radius: 15px;
  padding: 2rem;
  margin-top: 2rem;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1.5rem;
}

.stat-item {
  text-align: center;
  padding: 1rem;
  background: #f8fafc;
  border-radius: 10px;
  border: 1px solid #e2e8f0;
}

.stat-number {
  font-size: 2rem;
  font-weight: 800;
  color: #3b82f6;
  margin-bottom: 0.25rem;
}

.stat-label {
  font-size: 0.85rem;
  color: #6b7280;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

/* Responsive pour les nouveaux éléments */
@media (max-width: 768px) {
  .professors-container {
    padding: 1rem;
  }

  .professors-header h1 {
    font-size: 2rem;
  }

  .filters-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .filters-options {
    flex-direction: column;
    gap: 1rem;
  }

  .professors-grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .professor-header-card {
    flex-direction: column;
    gap: 0.5rem;
  }

  .price-info {
    align-self: flex-end;
  }

  .rating-section {
    flex-wrap: wrap;
  }

  .professor-details {
    flex-direction: column;
    gap: 0.3rem;
  }

  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .stat-number {
    font-size: 1.5rem;
  }
}
// src/pages/Professeurs.js - VERSION ENRICHIE avec réservation
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import { supabase } from '../supabaseClient';
import './Professeurs.css';

// 🆕 Import du composant de réservation
import BookingInterface from '../components/BookingInterface';

function Professeurs() {
  const [professors, setProfessors] = useState([]);
  const [filteredProfs, setFilteredProfs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // États des filtres (vos filtres existants)
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSpecialty, setSelectedSpecialty] = useState('');
  const [priceRange, setPriceRange] = useState([0, 50]);
  const [selectedLanguage, setSelectedLanguage] = useState('');
  const [onlyAvailable, setOnlyAvailable] = useState(false);
  const [sortBy, setSortBy] = useState('rating'); // rating, price, experience
  const [minRating, setMinRating] = useState(0); // Nouveau filtre par note

  // 🆕 États pour la réservation
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [selectedProfForBooking, setSelectedProfForBooking] = useState(null);
  const [userSession, setUserSession] = useState(null);

  // 🆕 Récupérer la session utilisateur
  useEffect(() => {
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setUserSession(session);
    };
    getSession();
  }, []);

  // Récupérer session et professeurs (votre code existant adapté)
  useEffect(() => {
    const fetchData = async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) {
          setError("Veuillez vous connecter");
          return;
        }

        console.log("🔍 Récupération des professeurs...");
        const response = await axios.get('http://localhost:3001/profs', {
          headers: { Authorization: `Bearer ${session.access_token}` }
        });

        console.log("✅ Professeurs reçus:", response.data);
        if (response.data.success) {
          setProfessors(response.data.profs);
          setFilteredProfs(response.data.profs);
        }
      } catch (err) {
        console.error("❌ Erreur récupération professeurs:", err);
        setError("Erreur lors du chargement des professeurs");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Appliquer les filtres (votre logique existante + nouveau filtre note)
  useEffect(() => {
    let filtered = [...professors];

    // Recherche par nom
    if (searchTerm) {
      filtered = filtered.filter(prof => 
        prof.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
        prof.bio?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Filtre par spécialité
    if (selectedSpecialty) {
      filtered = filtered.filter(prof => 
        prof.specialites?.includes(selectedSpecialty) ||
        prof.specialite === selectedSpecialty
      );
    }

    // Filtre par langue
    if (selectedLanguage) {
      filtered = filtered.filter(prof => 
        prof.langues_parlees?.includes(selectedLanguage)
      );
    }

    // Filtre par prix
    filtered = filtered.filter(prof => {
      const prix = prof.prix_30min || 15;
      return prix >= priceRange[0] && prix <= priceRange[1];
    });

    // Filtre par note minimum
    if (minRating > 0) {
      filtered = filtered.filter(prof => (prof.rating_moyen || 0) >= minRating);
    }

    // Filtre disponibles maintenant
    if (onlyAvailable) {
      filtered = filtered.filter(prof => prof.disponible_maintenant || prof.is_online);
    }

    // Tri
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'price':
          return (a.prix_30min || 15) - (b.prix_30min || 15);
        case 'experience':
          return (b.experience_annees || 1) - (a.experience_annees || 1);
        case 'reviews':
          return (b.nombre_avis || 0) - (a.nombre_avis || 0);
        case 'rating':
        default:
          return (b.rating_moyen || 4.5) - (a.rating_moyen || 4.5);
      }
    });

    setFilteredProfs(filtered);
  }, [professors, searchTerm, selectedSpecialty, selectedLanguage, priceRange, onlyAvailable, sortBy, minRating]);

  // 🆕 Fonction pour ouvrir la modal de réservation
  const handleBookingClick = (prof) => {
    if (!userSession) {
      alert('Veuillez vous connecter pour réserver un cours');
      return;
    }
    setSelectedProfForBooking(prof);
    setShowBookingModal(true);
  };

  // 🆕 Fonction pour fermer la modal
  const handleCloseBooking = () => {
    setShowBookingModal(false);
    setSelectedProfForBooking(null);
  };

  // 🆕 Vérifier si l'utilisateur est un élève
  const isStudent = () => {
    return userSession?.user?.user_metadata?.role === 'eleve' || 
           userSession?.user?.user_metadata?.role !== 'prof';
  };

  // Extraire toutes les spécialités uniques
  const allSpecialties = [...new Set(
    professors.flatMap(prof => prof.specialites || [prof.specialite]).filter(Boolean)
  )];

  // Extraire toutes les langues uniques
  const allLanguages = [...new Set(
    professors.flatMap(prof => prof.langues_parlees || []).filter(Boolean)
  )];

  // Calculer le temps depuis dernière connexion
  const getLastSeenText = (lastConnection) => {
    if (!lastConnection) return 'Jamais connecté';
    
    const now = new Date();
    const last = new Date(lastConnection);
    const diffMinutes = Math.round((now - last) / (1000 * 60));
    
    if (diffMinutes < 5) return 'En ligne maintenant';
    if (diffMinutes < 60) return `Il y a ${diffMinutes} min`;
    if (diffMinutes < 1440) return `Il y a ${Math.round(diffMinutes / 60)}h`;
    return `Il y a ${Math.round(diffMinutes / 1440)} jour(s)`;
  };

  // Fonction pour afficher les étoiles
  const StarDisplay = ({ rating, size = 'normal' }) => {
    const stars = [];
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;
    
    for (let i = 1; i <= 5; i++) {
      if (i <= fullStars) {
        stars.push(<span key={i} className={`star filled ${size}`}>⭐</span>);
      } else if (i === fullStars + 1 && hasHalfStar) {
        stars.push(<span key={i} className={`star half ${size}`}>⭐</span>);
      } else {
        stars.push(<span key={i} className={`star empty ${size}`}>☆</span>);
      }
    }
    return <div className="stars-display">{stars}</div>;
  };

  // Badge recommandé
  const getRecommendedBadge = (prof) => {
    const rating = prof.rating_moyen || 0;
    const reviews = prof.nombre_avis || 0;
    
    if (rating >= 4.8 && reviews >= 5) {
      return <span className="badge recommended">🏆 Recommandé</span>;
    } else if (rating >= 4.5 && reviews >= 3) {
      return <span className="badge popular">🔥 Populaire</span>;
    } else if (reviews === 0) {
      return <span className="badge new">🆕 Nouveau</span>;
    }
    return null;
  };

  if (loading) return (
    <div className="professors-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>Chargement des professeurs...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="professors-container">
      <div className="error-state">
        <h2>❌ Erreur</h2>
        <p>{error}</p>
      </div>
    </div>
  );

  return (
    <div className="professors-container">
      
      {/* Header */}
      <div className="professors-header">
        <h1>🧑‍🏫 Nos Professeurs d'Arabe</h1>
        <p>Trouvez le professeur idéal pour apprendre l'arabe. Cours individuels en ligne avec des natifs expérimentés.</p>
      </div>

      {/* Barre de recherche et filtres */}
      <div className="filters-section">
        <div className="filters-grid">
          
          {/* Recherche */}
          <div className="search-box">
            <input
              type="text"
              placeholder="🔍 Rechercher un professeur..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          {/* Spécialité */}
          <select
            value={selectedSpecialty}
            onChange={(e) => setSelectedSpecialty(e.target.value)}
          >
            <option value="">Toutes spécialités</option>
            {allSpecialties.map(spec => (
              <option key={spec} value={spec}>{spec}</option>
            ))}
          </select>

          {/* Langue */}
          <select
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
          >
            <option value="">Toutes langues</option>
            {allLanguages.map(lang => (
              <option key={lang} value={lang}>{lang}</option>
            ))}
          </select>

          {/* Note minimum */}
          <select
            value={minRating}
            onChange={(e) => setMinRating(parseFloat(e.target.value))}
          >
            <option value={0}>Toutes notes</option>
            <option value={4.5}>4.5⭐ et +</option>
            <option value={4.0}>4.0⭐ et +</option>
            <option value={3.5}>3.5⭐ et +</option>
          </select>

          {/* Prix max */}
          <select
            value={priceRange[1]}
            onChange={(e) => setPriceRange([0, parseInt(e.target.value)])}
          >
            <option value={50}>Prix max: 50€</option>
            <option value={20}>Max: 20€</option>
            <option value={30}>Max: 30€</option>
            <option value={40}>Max: 40€</option>
          </select>

          {/* Tri */}
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value)}
          >
            <option value="rating">Tri: Meilleurs notes</option>
            <option value="reviews">Tri: Plus d'avis</option>
            <option value="price">Tri: Prix</option>
            <option value="experience">Tri: Expérience</option>
          </select>
        </div>

        {/* Options additionnelles */}
        <div className="filters-options">
          <label className="checkbox-option">
            <input
              type="checkbox"
              checked={onlyAvailable}
              onChange={(e) => setOnlyAvailable(e.target.checked)}
            />
            <span>Disponibles maintenant uniquement</span>
          </label>
          
          <div className="results-count">
            {filteredProfs.length} professeur{filteredProfs.length > 1 ? 's' : ''} trouvé{filteredProfs.length > 1 ? 's' : ''}
          </div>
        </div>
      </div>

      {/* Grille des professeurs */}
      <div className="professors-grid">
        {filteredProfs.map((prof) => (
          <div key={prof.id} className="professor-card">
            
            {/* Photo et statut */}
            <div className="professor-photo">
              {prof.photo_url ? (
                <img src={prof.photo_url} alt={prof.nom} />
              ) : (
                <div className="photo-placeholder">👨‍🏫</div>
              )}
              
              {/* Badge statut en ligne */}
              {(prof.disponible_maintenant || prof.is_online) && (
                <div className="online-badge">
                  <div className="online-dot"></div>
                  En ligne
                </div>
              )}

              {/* Badge vidéo intro */}
              {prof.video_intro_url && (
                <div className="video-badge">
                  🎥 Vidéo
                </div>
              )}
            </div>

            {/* Contenu de la carte */}
            <div className="professor-content">
              
              {/* Header avec badge */}
              <div className="professor-header-card">
                <div className="name-section">
                  <h3>{prof.nom}</h3>
                  {getRecommendedBadge(prof)}
                </div>
                <div className="price-info">
                  <div className="price">{prof.prix_30min || 15}€</div>
                  <div className="duration">30 min</div>
                </div>
              </div>

              {/* Rating et avis enrichis */}
              <div className="professor-stats">
                <div className="rating-section">
                  <StarDisplay rating={prof.rating_moyen || 4.5} />
                  <span className="rating-text">
                    {(prof.rating_moyen || 4.5).toFixed(1)} 
                    ({prof.nombre_avis || 0} avis)
                  </span>
                </div>
                <div className="experience">
                  🏆 {prof.experience_display || `${prof.experience_annees || 1}+ ans`}
                </div>
              </div>

              {/* Spécialités */}
              <div className="specialties">
                {(prof.specialites || [prof.specialite]).filter(Boolean).slice(0, 3).map((spec, index) => (
                  <span key={index} className="specialty-tag">{spec}</span>
                ))}
              </div>

              {/* Bio */}
              {prof.bio && (
                <p className="professor-bio">
                  {prof.bio.length > 100 ? `${prof.bio.substring(0, 100)}...` : prof.bio}
                </p>
              )}

              {/* Langues et pays */}
              <div className="professor-details">
                <div className="languages">
                  🌍 {(prof.langues_parlees || ['Arabe']).join(', ')}
                </div>
                {prof.pays_origine && (
                  <div className="country">📍 {prof.pays_origine}</div>
                )}
              </div>

              {/* Dernière connexion */}
              {prof.derniere_connexion && (
                <div className="last-seen">
                  🕒 {getLastSeenText(prof.derniere_connexion)}
                </div>
              )}

              {/* 🆕 Boutons d'action MODIFIÉS */}
              <div className="professor-actions">
                {/* 🆕 Bouton de réservation avec modal */}
                {isStudent() ? (
                  <button
                    onClick={() => handleBookingClick(prof)}
                    className="btn-primary"
                  >
                    🎓 Réserver un cours
                  </button>
                ) : (
                  <Link
                    to={`/reservation?prof_id=${prof.id}`}
                    className="btn-primary"
                  >
                    📅 Réserver un cours
                  </Link>
                )}
                
                <Link
                  to={`/professeur/${prof.id}`}
                  className="btn-secondary"
                >
                  👁️ Voir le profil complet
                </Link>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Message si aucun résultat */}
      {filteredProfs.length === 0 && (
        <div className="no-results">
          <div className="no-results-icon">🔍</div>
          <h3>Aucun professeur trouvé</h3>
          <p>Essayez d'ajuster vos filtres pour voir plus de résultats.</p>
        </div>
      )}

      {/* Footer avec statistiques enrichies */}
      <div className="professors-footer">
        <div className="stats-grid">
          <div className="stat-item">
            <div className="stat-number">{professors.length}</div>
            <div className="stat-label">Professeurs</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{professors.filter(p => (p.rating_moyen || 0) >= 4.5).length}</div>
            <div className="stat-label">Excellents (4.5⭐+)</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{professors.filter(p => p.disponible_maintenant || p.is_online).length}</div>
            <div className="stat-label">En ligne</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{Math.round(professors.reduce((acc, p) => acc + (p.prix_30min || 15), 0) / professors.length)}€</div>
            <div className="stat-label">Prix moyen</div>
          </div>
        </div>
      </div>

      {/* 🆕 Modal de réservation */}
      {showBookingModal && selectedProfForBooking && (
        <BookingInterface
          profId={selectedProfForBooking.id}
          profData={selectedProfForBooking}
          onClose={handleCloseBooking}
        />
      )}
    </div>
  );
}

export default Professeurs;
// src/pages/Register.js
import React, { useState } from "react";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";

function Register() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [nom, setNom] = useState("");
  const [role, setRole] = useState("eleve");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleRegister = async (e) => {
    e.preventDefault();
    setError("");

    try {
      console.log("📧 Vérification de l’email :", email);

      const check = await fetch("http://localhost:3001/check-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ email })
      });

      const result = await check.json();
      console.log("🧪 Résultat check-email:", result);

      if (result.exists) {
        alert("❌ Cet email est déjà utilisé. Veuillez vous connecter ou utiliser un autre email.");
        return;
      }

      console.log("🔐 Tentative d'inscription via Supabase...");

      const { data, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            full_name: nom,
            role: role,
          },
        },
      });

      if (signUpError) throw signUpError;

      const user = data?.user;
      const userId = user?.id;
      console.log("✅ Utilisateur Supabase créé :", user);

      const session = await supabase.auth.getSession();
      const accessToken = session?.data?.session?.access_token;

      if (userId && accessToken) {
        const insertUrl = role === "eleve" ? "http://localhost:3001/eleves" : "http://localhost:3001/profs";
        console.log(`📥 Insertion dans ${role === "eleve" ? "eleves" : "profs"} à ${insertUrl}`);

        const insertResponse = await fetch(insertUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${accessToken}`,
          },
          body: JSON.stringify({
            nom,
            email,
            created_by: userId
          }),
        });

        const insertResult = await insertResponse.json();
        console.log("✅ Résultat insertion :", insertResult);
      }

      alert("📧 Un lien de confirmation a été envoyé à votre email. Veuillez l’activer avant de vous connecter.");
      navigate("/");
    } catch (err) {
      console.error("❌ Erreur d'inscription :", err);
      setError(err.message || "Erreur lors de l'inscription");
    }
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h2>Créer un compte</h2>
      <form onSubmit={handleRegister}>
        <div>
          <label>Nom complet :</label>
          <input value={nom} onChange={(e) => setNom(e.target.value)} required />
        </div>

        <div>
          <label>Email :</label>
          <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
        </div>

        <div>
          <label>Mot de passe :</label>
          <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
        </div>

        <div>
          <label>Je suis : </label>
          <select value={role} onChange={(e) => setRole(e.target.value)}>
            <option value="eleve">Élève</option>
            <option value="prof">Professeur</option>
          </select>
        </div>

        <button type="submit" style={{ marginTop: "1rem" }}>
          S'inscrire
        </button>
      </form>

      {error && <p style={{ color: "red" }}>{error}</p>}

      <p style={{ marginTop: "20px" }}>
        Vous avez déjà un compte ? <a href="/">Se connecter</a>
      </p>
    </div>
  );
}

export default Register;
/* src/pages/Reservation.css */

.reservation-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

/* Header professeur */
.professor-header {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.professor-info {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.professor-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  overflow: hidden;
  border: 4px solid #667eea;
}

.professor-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: white;
}

.professor-details h1 {
  margin: 0 0 0.5rem 0;
  color: #333;
  font-size: 1.8rem;
  font-weight: 700;
}

.specialties {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
  flex-wrap: wrap;
}

.specialty-tag {
  background: #667eea;
  color: white;
  padding: 0.3rem 0.8rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
}

.price {
  color: #28a745;
  font-weight: 600;
  font-size: 1.1rem;
}

/* Contenu principal */
.reservation-content {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

/* Sélecteur de date */
.date-selector {
  margin-bottom: 2.5rem;
}

.date-selector h3 {
  color: #333;
  margin-bottom: 1rem;
  font-size: 1.3rem;
  font-weight: 600;
}

.days-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 1rem;
}

.day-button {
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  border-radius: 15px;
  padding: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.day-button:hover {
  border-color: #667eea;
  background: #f0f4ff;
  transform: translateY(-2px);
}

.day-button.selected {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  border-color: #667eea;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.day-name {
  font-size: 0.8rem;
  text-transform: uppercase;
  margin-bottom: 0.3rem;
  opacity: 0.8;
}

.day-number {
  font-size: 1.5rem;
  font-weight: 700;
}

.day-month {
  font-size: 0.8rem;
  margin-top: 0.3rem;
  opacity: 0.8;
}

/* Sélecteur d'heure */
.time-selector {
  margin-bottom: 2.5rem;
}

.time-selector h3 {
  color: #333;
  margin-bottom: 1rem;
  font-size: 1.3rem;
  font-weight: 600;
}

.time-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 0.8rem;
}

.time-button {
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  border-radius: 10px;
  padding: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
  font-size: 0.9rem;
}

.time-button:hover {
  border-color: #667eea;
  background: #f0f4ff;
  transform: translateY(-1px);
}

.time-button.selected {
  background: linear-gradient(45deg, #667eea, #764ba2);
  color: white;
  border-color: #667eea;
  transform: translateY(-1px);
  box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
}

.no-slots {
  text-align: center;
  padding: 3rem;
  color: #6c757d;
}

.no-slots p {
  font-size: 1.2rem;
  margin-bottom: 0.5rem;
}

.no-slots small {
  color: #adb5bd;
}

/* Résumé de réservation */
.reservation-summary {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border-radius: 15px;
  padding: 2rem;
  border: 1px solid #dee2e6;
}

.reservation-summary h3 {
  color: #333;
  margin-bottom: 1.5rem;
  font-size: 1.3rem;
  font-weight: 600;
}

.summary-details {
  margin-bottom: 2rem;
}

.summary-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.8rem 0;
  border-bottom: 1px solid #dee2e6;
}

.summary-item:last-child {
  border-bottom: none;
}

.summary-item.total {
  font-size: 1.2rem;
  font-weight: 700;
  border-top: 2px solid #667eea;
  padding-top: 1rem;
  margin-top: 1rem;
}

.reserve-button {
  width: 100%;
  background: linear-gradient(45deg, #28a745, #20c997);
  color: white;
  border: none;
  border-radius: 15px;
  padding: 1.2rem 2rem;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
}

.reserve-button:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 7px 20px rgba(40, 167, 69, 0.4);
}

.reserve-button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
  transform: none;
}

/* Lien retour */
.back-link {
  text-align: center;
}

.back-link a {
  color: white;
  text-decoration: none;
  font-weight: 500;
  padding: 0.8rem 1.5rem;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 25px;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.back-link a:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
}

/* États de chargement et d'erreur */
.loading-state, .error-state {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  margin: 2rem auto;
  max-width: 500px;
  color: #6c757d;
  font-size: 1.2rem;
}

.error-state h2 {
  color: #dc3545;
  margin-bottom: 1rem;
}

.error-state a {
  color: #667eea;
  text-decoration: none;
  font-weight: 600;
}

.error-state a:hover {
  text-decoration: underline;
}

/* Responsive */
@media (max-width: 768px) {
  .reservation-container {
    padding: 1rem;
  }
  
  .professor-info {
    flex-direction: column;
    text-align: center;
  }
  
  .days-grid {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .time-grid {
    grid-template-columns: repeat(3, 1fr);
  }
  
  .summary-item {
    flex-direction: column;
    gap: 0.5rem;
    text-align: center;
  }
}
// src/pages/Reservation.js - VERSION CORRIGÉE (sans erreur ESLint)
import React, { useEffect, useState } from "react";
import { useLocation, useNavigate, Link } from "react-router-dom";
import { supabase } from "../supabaseClient";
import axios from "axios";
import './Reservation.css'; // Nouveau fichier CSS

function Reservation() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedTime, setSelectedTime] = useState("");
  const [prof, setProf] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [reserving, setReserving] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();
  const profId = new URLSearchParams(location.search).get("prof_id");

  // 1. Récupération session Supabase
  useEffect(() => {
    console.log("🔍 [Etape 1] Tentative de récupération session Supabase...");
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) {
        console.warn("⛔ [Etape 1] Session introuvable, redirection.");
        alert("⛔ Session expirée. Merci de vous reconnecter.");
        navigate("/");
        return;
      }
      setSession(session);
      const access_token = session?.access_token || null;
      setToken(access_token);
      console.log("✅ [Etape 1] Session récupérée");
    });
  }, [navigate]);

  // 2. Récupération du professeur et des disponibilités (CORRIGÉ)
  useEffect(() => {
    const fetchProfAndAvailabilities = async () => {
      if (!token || !profId) {
        console.warn("⏳ [Etape 2] Token ou profId manquant, attente...");
        return;
      }

      console.log("🔍 [Etape 2] Récupération des professeurs...");
      try {
        // Récupérer le professeur
        const profRes = await axios.get("http://localhost:3001/profs", {
          headers: { Authorization: `Bearer ${token}` },
        });

        const found = profRes.data?.profs?.find((p) => p.id === profId);
        if (!found) {
          setError("Professeur introuvable");
          return;
        }

        setProf(found);

        // Récupérer les disponibilités du professeur
        console.log("🔍 Récupération des disponibilités...");
        const availRes = await axios.get(`http://localhost:3001/disponibilites?prof_id=${found.id}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        
        setAvailableSlots(availRes.data?.disponibilites || []);
        console.log("✅ Disponibilités récupérées:", availRes.data?.disponibilites);

      } catch (err) {
        console.error("❌ [Etape 2] Erreur récupération prof :", err);
        setError("Erreur lors du chargement du professeur");
      } finally {
        setLoading(false);
      }
    };

    fetchProfAndAvailabilities();
  }, [token, profId]); // ✅ Dépendances correctes - plus d'erreur ESLint

  // 3. Fonction pour vérifier si un créneau est disponible
  const isSlotAvailable = (date, time) => {
    const joursSemaine = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
    const dayName = joursSemaine[date.getDay()];
    
    return availableSlots.some(slot => {
      if (slot.jour !== dayName) return false;
      
      const [slotStartHour, slotStartMin] = slot.heure_debut.split(':').map(Number);
      const [slotEndHour, slotEndMin] = slot.heure_fin.split(':').map(Number);
      const [timeHour, timeMin] = time.split(':').map(Number);
      
      const slotStartMinutes = slotStartHour * 60 + slotStartMin;
      const slotEndMinutes = slotEndHour * 60 + slotEndMin;
      const timeMinutes = timeHour * 60 + timeMin;
      
      return timeMinutes >= slotStartMinutes && timeMinutes + 30 <= slotEndMinutes;
    });
  };

  // 4. Génération des créneaux horaires intelligente
  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 8; hour <= 20; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        slots.push(timeString);
      }
    }
    return slots.filter(slot => isSlotAvailable(selectedDate, slot));
  };

  // 5. Génération du calendrier des 7 prochains jours
  const generateNext7Days = () => {
    const days = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date();
      date.setDate(date.getDate() + i);
      days.push(date);
    }
    return days;
  };

  // 6. Réservation
  const handleReservation = async () => {
    if (!selectedTime) {
      alert("⚠️ Veuillez sélectionner un créneau horaire");
      return;
    }

    setReserving(true);
    console.log("🟡 [Etape 3] Début de la réservation...");
    
    try {
      if (!token) {
        alert("⛔ Session expirée. Veuillez vous reconnecter.");
        navigate("/");
        return;
      }

      // Construction de la date
      const [hours, minutes] = selectedTime.split(":").map(Number);
      const fullDate = new Date(selectedDate);
      fullDate.setHours(hours, minutes, 0, 0);

      const year = fullDate.getFullYear();
      const month = String(fullDate.getMonth() + 1).padStart(2, '0');
      const day = String(fullDate.getDate()).padStart(2, '0');
      const hour = String(hours).padStart(2, '0');
      const minute = String(minutes).padStart(2, '0');
      
      const localDateString = `${year}-${month}-${day}T${hour}:${minute}:00`;

      // Récupération élève
      const { data: eleveData } = await axios.get("http://localhost:3001/eleves", {
        headers: { Authorization: `Bearer ${token}` },
      });

      const eleve_id = eleveData.eleves?.[0]?.id;
      if (!eleve_id) {
        throw new Error("Élève non trouvé");
      }

      const payload = {
        date: localDateString,
        prof_id: profId,
        eleve_id,
      };

      const res = await axios.post("http://localhost:3001/cours", payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("✅ Réservation réussie:", res.data);
      alert("✅ Cours réservé avec succès !");
      navigate("/dashboard");
    } catch (err) {
      console.error("❌ Erreur lors de la réservation:", err?.response?.data || err.message);
      
      const errorMessage = err?.response?.data?.message || "Erreur lors de la réservation";
      const disponibilites = err?.response?.data?.disponibilites_du_jour;
      
      if (disponibilites) {
        alert(`❌ ${errorMessage}\n\nCréneaux disponibles: ${disponibilites.join(', ')}`);
      } else {
        alert(`❌ ${errorMessage}`);
      }
    } finally {
      setReserving(false);
    }
  };

  // États de chargement
  if (!profId) {
    return (
      <div className="reservation-container">
        <div className="error-state">
          <h2>⚠️ Aucun professeur sélectionné</h2>
          <p>Veuillez d'abord <Link to="/professeurs">choisir un professeur</Link>.</p>
        </div>
      </div>
    );
  }

  if (!session) return <div className="loading-state">🔐 Veuillez vous connecter</div>;
  if (error) return <div className="error-state">❌ {error}</div>;
  if (loading) return <div className="loading-state">⏳ Chargement du professeur...</div>;
  if (!prof) return <div className="error-state">⚠️ Professeur non trouvé</div>;

  const next7Days = generateNext7Days();
  const availableTimeSlotsForSelectedDate = generateTimeSlots();

  return (
    <div className="reservation-container">
      {/* Header avec infos professeur */}
      <div className="professor-header">
        <div className="professor-info">
          <div className="professor-avatar">
            {prof.photo_url ? (
              <img src={prof.photo_url} alt={prof.nom} />
            ) : (
              <div className="avatar-placeholder">👨‍🏫</div>
            )}
          </div>
          <div className="professor-details">
            <h1>📅 Réserver un cours avec {prof.nom}</h1>
            {prof.specialites && (
              <div className="specialties">
                {prof.specialites.map((spec, index) => (
                  <span key={index} className="specialty-tag">{spec}</span>
                ))}
              </div>
            )}
            {prof.prix_30min && (
              <div className="price">💰 {prof.prix_30min}€ / 30 min</div>
            )}
          </div>
        </div>
      </div>

      <div className="reservation-content">
        {/* Sélecteur de date */}
        <div className="date-selector">
          <h3>📅 Choisir une date</h3>
          <div className="days-grid">
            {next7Days.map((date, index) => (
              <button
                key={index}
                onClick={() => setSelectedDate(date)}
                className={`day-button ${selectedDate.toDateString() === date.toDateString() ? 'selected' : ''}`}
              >
                <div className="day-name">
                  {date.toLocaleDateString('fr-FR', { weekday: 'short' })}
                </div>
                <div className="day-number">
                  {date.getDate()}
                </div>
                <div className="day-month">
                  {date.toLocaleDateString('fr-FR', { month: 'short' })}
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Sélecteur d'heure */}
        <div className="time-selector">
          <h3>🕒 Choisir un créneau</h3>
          {availableTimeSlotsForSelectedDate.length === 0 ? (
            <div className="no-slots">
              <p>😔 Aucun créneau disponible pour cette date</p>
              <small>Essayez une autre date ou contactez le professeur</small>
            </div>
          ) : (
            <div className="time-grid">
              {availableTimeSlotsForSelectedDate.map((time) => (
                <button
                  key={time}
                  onClick={() => setSelectedTime(time)}
                  className={`time-button ${selectedTime === time ? 'selected' : ''}`}
                >
                  {time}
                </button>
              ))}
            </div>
          )}
        </div>

        {/* Résumé et bouton de réservation */}
        {selectedTime && (
          <div className="reservation-summary">
            <h3>📋 Résumé</h3>
            <div className="summary-details">
              <div className="summary-item">
                <span>👨‍🏫 Professeur:</span>
                <span>{prof.nom}</span>
              </div>
              <div className="summary-item">
                <span>📅 Date:</span>
                <span>{selectedDate.toLocaleDateString('fr-FR')}</span>
              </div>
              <div className="summary-item">
                <span>🕒 Heure:</span>
                <span>{selectedTime}</span>
              </div>
              <div className="summary-item">
                <span>⏱️ Durée:</span>
                <span>30 minutes</span>
              </div>
              {prof.prix_30min && (
                <div className="summary-item total">
                  <span>💰 Total:</span>
                  <span>{prof.prix_30min}€</span>
                </div>
              )}
            </div>
            
            <button 
              onClick={handleReservation} 
              disabled={reserving}
              className="reserve-button"
            >
              {reserving ? '⏳ Réservation...' : '✅ Confirmer la réservation'}
            </button>
          </div>
        )}
      </div>

      <div className="back-link">
        <Link to="/professeurs">← Retour aux professeurs</Link>
      </div>
    </div>
  );
}

export default Reservation;
// src/pages/Reservation.js
import React, { useEffect, useState } from "react";
import { useLocation, useNavigate, Link } from "react-router-dom";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { supabase } from "../supabaseClient";
import axios from "axios";

function Reservation() {
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedTime, setSelectedTime] = useState("09:00");
  const [prof, setProf] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const navigate = useNavigate();
  const location = useLocation();
  const profId = new URLSearchParams(location.search).get("prof_id");

  // 1. Récupération session Supabase
  useEffect(() => {
    console.log("🔍 [Etape 1] Tentative de récupération session Supabase...");
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) {
        console.warn("⛔ [Etape 1] Session introuvable, redirection.");
        alert("⛔ Session expirée. Merci de vous reconnecter.");
        navigate("/");
        return;
      }
      setSession(session);
      const access_token = session?.access_token || null;
      setToken(access_token);
      console.log("✅ [Etape 1] Session récupérée :", session);
      console.log("🔑 [Etape 1] Access Token :", access_token);
    });
  }, [navigate]);

  // 2. Récupération du professeur
  useEffect(() => {
    const fetchProf = async () => {
      if (!token || !profId) {
        console.warn("⏳ [Etape 2] Token ou profId manquant, attente...");
        return;
      }

      console.log("🔍 [Etape 2] Récupération des professeurs...");
      try {
        const res = await axios.get("http://localhost:3001/profs", {
          headers: { Authorization: `Bearer ${token}` },
        });

        console.log("✅ [Etape 2] Liste profs reçue :", res.data);
        const found = res.data?.profs?.find((p) => p.id === profId);
        if (!found) {
          console.warn("❌ [Etape 2] Professeur introuvable dans la liste !");
          setError("Professeur introuvable");
        } else {
          setProf(found);
          console.log("👨‍🏫 [Etape 2] Professeur trouvé :", found);
        }
      } catch (err) {
        console.error("❌ [Etape 2] Erreur récupération prof :", err);
        setError("Erreur lors du chargement du professeur");
      } finally {
        setLoading(false);
      }
    };

    fetchProf();
  }, [token, profId]);

  // 3. Envoi de la réservation avec correction du fuseau horaire
  const handleReservation = async () => {
    console.log("🟡 [Etape 3] Début de la réservation...");
    try {
      if (!token) {
        console.warn("⛔ [Etape 3] Token invalide");
        alert("⛔ Session expirée. Veuillez vous reconnecter.");
        navigate("/");
        return;
      }

      // 🆕 FIX: Construction correcte de la date en heure locale
      const [hours, minutes] = selectedTime.split(":").map(Number);
      
      // Créer une nouvelle date avec l'année, mois, jour de selectedDate
      // mais avec l'heure/minute choisie
      const fullDate = new Date(selectedDate);
      fullDate.setHours(hours, minutes, 0, 0);

      // 🚨 IMPORTANT: Garder l'heure locale, ne pas convertir en UTC
      // On va envoyer la date en format local
      const year = fullDate.getFullYear();
      const month = String(fullDate.getMonth() + 1).padStart(2, '0');
      const day = String(fullDate.getDate()).padStart(2, '0');
      const hour = String(hours).padStart(2, '0');
      const minute = String(minutes).padStart(2, '0');
      
      // Format: YYYY-MM-DDTHH:MM:SS (sans Z pour éviter la conversion UTC)
      const localDateString = `${year}-${month}-${day}T${hour}:${minute}:00`;

      console.log("📆 [Etape 3] Date sélectionnée :", selectedDate);
      console.log("🕐 [Etape 3] Heure sélectionnée :", selectedTime);
      console.log("📅 [Etape 3] Date complète construite :", fullDate);
      console.log("📨 [Etape 3] Date envoyée au backend :", localDateString);

      // Récupérer l'élève connecté
      console.log("🔍 [Etape 3] Récupération des données élève...");
      const { data: eleveData } = await axios.get("http://localhost:3001/eleves", {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("✅ [Etape 3] Données élève reçues :", eleveData);

      const eleve_id = eleveData.eleves?.[0]?.id;
      if (!eleve_id) {
        console.error("❌ [Etape 3] Élève introuvable !");
        throw new Error("Élève non trouvé");
      }

      const payload = {
        date: localDateString, // 🆕 Utiliser la date locale au lieu de ISO
        prof_id: profId,
        eleve_id,
      };

      console.log("📨 [Etape 3] Payload envoyé au backend :", payload);

      const res = await axios.post("http://localhost:3001/cours", payload, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("✅ [Etape 3] Réservation réussie :", res.data);
      alert("✅ Cours réservé avec succès !");
      navigate("/dashboard");
    } catch (err) {
      console.error("❌ [Etape 3] Erreur lors de la réservation :", err?.response?.data || err.message);
      
      // 🆕 Affichage d'un message d'erreur plus informatif
      const errorMessage = err?.response?.data?.message || "Erreur lors de la réservation";
      const disponibilites = err?.response?.data?.disponibilites_du_jour;
      
      if (disponibilites) {
        alert(`❌ ${errorMessage}\n\nCréneaux disponibles: ${disponibilites.join(', ')}`);
      } else {
        alert(`❌ ${errorMessage}`);
      }
    }
  };

  // 4. Affichage conditionnel
  if (!profId) {
    console.warn("⚠️ [Etape 4] Aucun prof_id trouvé dans l'URL");
    return (
      <div style={{ padding: "2rem" }}>
        <p>⚠️ Aucun professeur sélectionné.</p>
        <p>
          Veuillez d'abord <Link to="/professeurs">choisir un professeur</Link>.
        </p>
      </div>
    );
  }

  if (!session) return <p>🔐 Veuillez vous connecter</p>;
  if (error) return <p>❌ {error}</p>;
  if (loading) return <p>⏳ Chargement du professeur...</p>;
  if (!prof) return <p>⚠️ Professeur non trouvé</p>;

  return (
    <div style={{ padding: "2rem" }}>
      <h2>📅 Réserver un cours avec {prof.nom}</h2>

      <div style={{ marginBottom: "1rem" }}>
        <label>Date :</label>
        <DatePicker 
          selected={selectedDate} 
          onChange={setSelectedDate}
          dateFormat="dd/MM/yyyy"
          minDate={new Date()} // Empêche de sélectionner une date passée
        />
      </div>

      <div style={{ marginBottom: "1rem" }}>
        <label>Heure :</label>
        <select value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>
          {["08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"].map((h) => (
            <option key={h} value={h}>{h}</option>
          ))}
        </select>
      </div>

      <button onClick={handleReservation} style={{ marginTop: "1rem", padding: "0.5rem 1rem" }}>
        Réserver ce créneau
      </button>

      <div style={{ marginTop: "1rem" }}>
        <Link to="/professeurs">← Retour aux professeurs</Link>
      </div>
    </div>
  );
}

export default Reservation;
import React, { useState, useEffect } from "react";
import { supabase } from "../supabaseClient";
import { useNavigate } from "react-router-dom";

function ResetPassword() {
  const [newPassword, setNewPassword] = useState("");
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const checkSession = async () => {
      const result = await supabase.auth.getSession();
      const session = result?.data?.session;

      if (!session) {
        setError("Lien invalide ou expiré.");
      } else {
        // ✅ Nettoyage de l’URL après récupération
        window.history.replaceState({}, document.title, "/reset-password");
      }
    };

    checkSession();
  }, []);

  const handleReset = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");

    const { error } = await supabase.auth.updateUser({
      password: newPassword,
    });

    if (error) {
      setError("Erreur : " + error.message);
    } else {
      setMessage("Mot de passe mis à jour avec succès !");
      setTimeout(() => navigate("/login"), 3000); // ⏳ Redirige après 3s
    }
  };

  return (
    <div style={{ textAlign: "center", marginTop: "100px" }}>
      <h2>Réinitialisation du mot de passe</h2>

      <form onSubmit={handleReset}>
        <input
          type="password"
          placeholder="Nouveau mot de passe"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
          style={{ display: "block", margin: "10px auto" }}
        />
        <button type="submit">Mettre à jour</button>
      </form>

      {error && <p style={{ color: "red" }}>{error}</p>}
      {message && <p style={{ color: "green" }}>{message}</p>}
    </div>
  );
}

export default ResetPassword;
/* src/pages/ReviewCourse.css */

.review-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
}

/* Header */
.review-header {
  text-align: center;
  margin-bottom: 2rem;
  color: white;
}

.review-header h1 {
  font-size: 2.5rem;
  font-weight: 800;
  margin-bottom: 0.5rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.review-header p {
  font-size: 1.1rem;
  opacity: 0.9;
}

/* Informations du cours */
.course-info {
  margin-bottom: 2rem;
}

.course-card {
  background: white;
  border-radius: 20px;
  padding: 1.5rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.professor-info {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.professor-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  overflow: hidden;
  border: 4px solid #667eea;
  flex-shrink: 0;
}

.professor-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.avatar-placeholder {
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  color: white;
}

.course-details h3 {
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 0.5rem;
}

.course-date, .course-status {
  color: #4a5568;
  margin-bottom: 0.3rem;
  font-size: 0.95rem;
}

/* Formulaire d'évaluation */
.review-form {
  background: white;
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  margin-bottom: 2rem;
}

.rating-section {
  margin-bottom: 2.5rem;
}

.rating-section h3 {
  color: #2d3748;
  margin-bottom: 1.5rem;
  font-size: 1.3rem;
  font-weight: 600;
}

/* Étoiles */
.star-rating {
  margin-bottom: 1.5rem;
}

.rating-label {
  display: block;
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 0.5rem;
  font-size: 0.95rem;
}

.stars {
  display: flex;
  gap: 0.3rem;
  margin-bottom: 0.5rem;
}

.star {
  background: none;
  border: none;
  font-size: 2rem;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0.2rem;
  border-radius: 8px;
}

.star:hover:not(.disabled) {
  transform: scale(1.1);
  background: rgba(102, 126, 234, 0.1);
}

.star.filled {
  color: #fbbf24;
  filter: drop-shadow(0 2px 4px rgba(251, 191, 36, 0.3));
}

.star:not(.filled) {
  color: #d1d5db;
}

.star.disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

.rating-text {
  color: #6b7280;
  font-size: 0.85rem;
  font-style: italic;
}

/* Notes détaillées */
.detailed-ratings {
  display: grid;
  gap: 1rem;
}

/* Commentaire */
.comment-section {
  margin-bottom: 2rem;
}

.comment-section h3 {
  color: #2d3748;
  margin-bottom: 1rem;
  font-size: 1.3rem;
  font-weight: 600;
}

.comment-section textarea {
  width: 100%;
  padding: 1rem;
  border: 2px solid #e1e5e9;
  border-radius: 12px;
  font-size: 1rem;
  line-height: 1.5;
  resize: vertical;
  font-family: inherit;
  transition: border-color 0.3s ease;
}

.comment-section textarea:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.character-count {
  text-align: right;
  font-size: 0.8rem;
  color: #9ca3af;
  margin-top: 0.5rem;
}

/* Confidentialité */
.privacy-section {
  margin-bottom: 2rem;
  padding: 1.5rem;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
}

.privacy-option {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.5rem;
}

.privacy-option input {
  margin-right: 0.75rem;
  transform: scale(1.2);
  accent-color: #667eea;
}

.privacy-note {
  font-size: 0.85rem;
  color: #6b7280;
  margin: 0;
  line-height: 1.4;
}

/* Actions */
.form-actions {
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #e2e8f0;
}

.btn-primary {
  background: linear-gradient(45deg, #10b981, #059669);
  color: white;
  padding: 1rem 2rem;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1rem;
}

.btn-primary:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(16, 185, 129, 0.3);
}

.btn-primary:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.btn-secondary {
  background: #f8fafc;
  color: #4a5568;
  padding: 1rem 2rem;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  font-size: 1rem;
}

.btn-secondary:hover:not(:disabled) {
  background: #edf2f7;
  border-color: #cbd5e0;
}

/* Aide */
.help-section {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 1.5rem;
  color: white;
}

.help-section h4 {
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.help-section ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.help-section li {
  padding: 0.5rem 0;
  padding-left: 1.5rem;
  position: relative;
  line-height: 1.4;
}

.help-section li:before {
  content: "💡";
  position: absolute;
  left: 0;
}

/* États de chargement */
.loading-state, .error-state {
  text-align: center;
  padding: 4rem 2rem;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid #e2e8f0;
  border-top: 4px solid #667eea;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 1rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.error-state h2 {
  color: #ef4444;
  margin-bottom: 1rem;
}

.error-state p {
  color: #6b7280;
  margin-bottom: 1.5rem;
}

/* Responsive */
@media (max-width: 768px) {
  .review-container {
    padding: 1rem;
  }

  .review-header h1 {
    font-size: 2rem;
  }

  .professor-info {
    flex-direction: column;
    text-align: center;
  }

  .professor-avatar {
    width: 60px;
    height: 60px;
  }

  .stars {
    justify-content: center;
  }

  .star {
    font-size: 1.5rem;
  }

  .form-actions {
    flex-direction: column;
  }

  .btn-primary, .btn-secondary {
    width: 100%;
  }
}
// src/pages/ReviewCourse.js - Interface d'évaluation d'un cours
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import axios from 'axios';
import './ReviewCourse.css';

function ReviewCourse() {
  const { coursId } = useParams();
  const navigate = useNavigate();
  
  const [session, setSession] = useState(null);
  const [token, setToken] = useState(null);
  const [cours, setCours] = useState(null);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState(null);

  // États du formulaire d'évaluation
  const [rating, setRating] = useState(0);
  const [pedagogieRating, setPedagogieRating] = useState(0);
  const [communicationRating, setCommunicationRating] = useState(0);
  const [ponctualiteRating, setPonctualiteRating] = useState(0);
  const [commentaire, setCommentaire] = useState('');
  const [isPublic, setIsPublic] = useState(true);

  // Récupération de la session
  useEffect(() => {
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        navigate('/');
        return;
      }
      setSession(session);
      setToken(session.access_token);
    };
    getSession();
  }, [navigate]);

  // Récupération des détails du cours
  useEffect(() => {
    const fetchCoursDetails = async () => {
      if (!token || !coursId) return;

      try {
        // Récupérer les cours qu'on peut évaluer
        const response = await axios.get('http://localhost:3001/reviews/can-review', {
          headers: { Authorization: `Bearer ${token}` }
        });

        if (response.data.success) {
          const coursToReview = response.data.cours_to_review.find(c => c.id.toString() === coursId);
          if (coursToReview) {
            setCours(coursToReview);
          } else {
            setError("Ce cours ne peut pas être évalué ou a déjà été évalué");
          }
        }
      } catch (err) {
        console.error("Erreur récupération cours:", err);
        setError("Erreur lors du chargement du cours");
      } finally {
        setLoading(false);
      }
    };

    fetchCoursDetails();
  }, [token, coursId]);

  // Fonction pour afficher les étoiles
  const StarRating = ({ rating, setRating, label, disabled = false }) => {
    return (
      <div className="star-rating">
        <label className="rating-label">{label}</label>
        <div className="stars">
          {[1, 2, 3, 4, 5].map((star) => (
            <button
              key={star}
              type="button"
              className={`star ${star <= rating ? 'filled' : ''} ${disabled ? 'disabled' : ''}`}
              onClick={() => !disabled && setRating(star)}
              disabled={disabled}
            >
              ⭐
            </button>
          ))}
        </div>
        <span className="rating-text">
          {rating === 0 ? 'Non noté' : `${rating}/5 étoile${rating > 1 ? 's' : ''}`}
        </span>
      </div>
    );
  };

  // Soumission de l'évaluation
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (rating === 0) {
      alert("Veuillez donner une note générale au cours");
      return;
    }

    setSubmitting(true);

    try {
      const reviewData = {
        cours_id: parseInt(coursId),
        rating,
        commentaire: commentaire.trim() || null,
        pedagogie_rating: pedagogieRating || null,
        communication_rating: communicationRating || null,
        ponctualite_rating: ponctualiteRating || null,
        is_public: isPublic
      };

      const response = await axios.post('http://localhost:3001/reviews', reviewData, {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (response.data.success) {
        alert("✅ Évaluation envoyée avec succès ! Merci pour votre retour.");
        navigate('/dashboard');
      }
    } catch (err) {
      console.error("Erreur soumission évaluation:", err);
      const errorMessage = err.response?.data?.message || "Erreur lors de l'envoi de l'évaluation";
      alert(`❌ ${errorMessage}`);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return (
    <div className="review-container">
      <div className="loading-state">
        <div className="spinner"></div>
        <p>Chargement du cours...</p>
      </div>
    </div>
  );

  if (error) return (
    <div className="review-container">
      <div className="error-state">
        <h2>❌ Erreur</h2>
        <p>{error}</p>
        <Link to="/dashboard" className="btn-secondary">← Retour au dashboard</Link>
      </div>
    </div>
  );

  if (!cours) return (
    <div className="review-container">
      <div className="error-state">
        <h2>⚠️ Cours non trouvé</h2>
        <p>Ce cours ne peut pas être évalué.</p>
        <Link to="/dashboard" className="btn-secondary">← Retour au dashboard</Link>
      </div>
    </div>
  );

  return (
    <div className="review-container">
      
      {/* Header */}
      <div className="review-header">
        <h1>⭐ Évaluer votre cours</h1>
        <p>Votre avis nous aide à améliorer la qualité des cours</p>
      </div>

      {/* Informations du cours */}
      <div className="course-info">
        <div className="course-card">
          <div className="professor-info">
            <div className="professor-avatar">
              {cours.profs?.photo_url ? (
                <img src={cours.profs.photo_url} alt={cours.profs.nom} />
              ) : (
                <div className="avatar-placeholder">👨‍🏫</div>
              )}
            </div>
            <div className="course-details">
              <h3>Cours avec {cours.profs?.nom}</h3>
              <div className="course-date">
                📅 {new Date(cours.date).toLocaleDateString('fr-FR', {
                  weekday: 'long',
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </div>
              <div className="course-status">
                🏁 Statut: {cours.statut}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Formulaire d'évaluation */}
      <form onSubmit={handleSubmit} className="review-form">
        
        {/* Note générale */}
        <div className="rating-section">
          <h3>📊 Évaluation générale</h3>
          <StarRating 
            rating={rating} 
            setRating={setRating} 
            label="Note générale du cours *" 
          />
        </div>

        {/* Notes détaillées */}
        <div className="rating-section">
          <h3>🔍 Évaluation détaillée (optionnel)</h3>
          <div className="detailed-ratings">
            <StarRating 
              rating={pedagogieRating} 
              setRating={setPedagogieRating} 
              label="Pédagogie" 
            />
            <StarRating 
              rating={communicationRating} 
              setRating={setCommunicationRating} 
              label="Communication" 
            />
            <StarRating 
              rating={ponctualiteRating} 
              setRating={setPonctualiteRating} 
              label="Ponctualité" 
            />
          </div>
        </div>

        {/* Commentaire */}
        <div className="comment-section">
          <h3>💬 Votre avis (optionnel)</h3>
          <textarea
            value={commentaire}
            onChange={(e) => setCommentaire(e.target.value)}
            placeholder="Partagez votre expérience avec ce professeur. Qu'avez-vous aimé ? Que pourrait-il améliorer ?"
            maxLength={1000}
            rows={4}
          />
          <div className="character-count">
            {commentaire.length}/1000 caractères
          </div>
        </div>

        {/* Options de confidentialité */}
        <div className="privacy-section">
          <label className="privacy-option">
            <input
              type="checkbox"
              checked={isPublic}
              onChange={(e) => setIsPublic(e.target.checked)}
            />
            <span>Publier cet avis publiquement (votre nom sera partiellement masqué)</span>
          </label>
          <p className="privacy-note">
            Si vous décochez cette option, seul le professeur pourra voir votre avis.
          </p>
        </div>

        {/* Boutons d'action */}
        <div className="form-actions">
          <button 
            type="button" 
            onClick={() => navigate('/dashboard')}
            className="btn-secondary"
            disabled={submitting}
          >
            Annuler
          </button>
          <button 
            type="submit" 
            className="btn-primary"
            disabled={submitting || rating === 0}
          >
            {submitting ? '⏳ Envoi...' : '✅ Publier mon évaluation'}
          </button>
        </div>
      </form>

      {/* Aide */}
      <div className="help-section">
        <h4>💡 Conseils pour une bonne évaluation</h4>
        <ul>
          <li>Soyez honnête et constructif dans vos commentaires</li>
          <li>Mentionnez ce qui vous a plu et ce qui pourrait être amélioré</li>
          <li>Vos avis aident d'autres élèves à choisir leur professeur</li>
          <li>Restez respectueux, même si l'expérience n'était pas parfaite</li>
        </ul>
      </div>
    </div>
  );
}

export default ReviewCourse;
import React, { useState, useEffect } from 'react';

const AvailabilityManagement = () => {
  const [disponibilites, setDisponibilites] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);
  
  // Formulaire pour nouvelle disponibilité
  const [newAvailability, setNewAvailability] = useState({
    jour: 'lundi',
    heure_debut: '09:00',
    heure_fin: '18:00',
    is_active: true
  });

  const jours = [
    'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi', 'dimanche'
  ];

  const joursLabels = {
    'lundi': 'Lundi',
    'mardi': 'Mardi', 
    'mercredi': 'Mercredi',
    'jeudi': 'Jeudi',
    'vendredi': 'Vendredi',
    'samedi': 'Samedi',
    'dimanche': 'Dimanche'
  };

  useEffect(() => {
    fetchDisponibilites();
  }, []);

  const fetchDisponibilites = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setMessage('⚠️ Vous devez être connecté pour gérer vos disponibilités');
        setLoading(false);
        return;
      }

      // Récupérer d'abord l'ID du prof
      const profResponse = await fetch('http://localhost:3001/profs/me', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const profData = await profResponse.json();
      if (!profData.success || !profData.prof) {
        setMessage('⚠️ Profil professeur non trouvé');
        setLoading(false);
        return;
      }

      // Récupérer les disponibilités
      const response = await fetch(`http://localhost:3001/booking/availability/${profData.prof.id}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const data = await response.json();
      if (data.success) {
        setDisponibilites(data.disponibilites || []);
      } else {
        setMessage('❌ Erreur lors du chargement des disponibilités');
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur de connexion');
    } finally {
      setLoading(false);
    }
  };

  const handleAddAvailability = async () => {
    if (newAvailability.heure_debut >= newAvailability.heure_fin) {
      setMessage('❌ L\'heure de fin doit être après l\'heure de début');
      return;
    }

    setSaving(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:3001/booking/availability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(newAvailability)
      });

      const data = await response.json();
      if (data.success) {
        setDisponibilites([...disponibilites, data.disponibilite]);
        setNewAvailability({
          jour: 'lundi',
          heure_debut: '09:00',
          heure_fin: '18:00',
          is_active: true
        });
        setShowAddForm(false);
        setMessage('✅ Disponibilité ajoutée avec succès');
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de l\'ajout');
    } finally {
      setSaving(false);
    }
  };

  const handleDeleteAvailability = async (id) => {
    if (!window.confirm('Êtes-vous sûr de vouloir supprimer cette disponibilité ?')) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3001/booking/availability/${id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      const data = await response.json();
      if (data.success) {
        setDisponibilites(disponibilites.filter(d => d.id !== id));
        setMessage('✅ Disponibilité supprimée');
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de la suppression');
    }
  };

  const toggleAvailability = async (id, currentStatus) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3001/booking/availability/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ is_active: !currentStatus })
      });

      const data = await response.json();
      if (data.success) {
        setDisponibilites(disponibilites.map(d => 
          d.id === id ? { ...d, is_active: !currentStatus } : d
        ));
        setMessage(`✅ Disponibilité ${!currentStatus ? 'activée' : 'désactivée'}`);
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de la modification');
    }
  };

  if (loading) {
    return (
      <div style={{padding: '2rem', textAlign: 'center'}}>
        <div>Chargement de vos disponibilités...</div>
      </div>
    );
  }

  return (
    <div style={{padding: '2rem', backgroundColor: 'white', borderRadius: '15px', margin: '2rem 0'}}>
      {/* Header */}
      <div style={{marginBottom: '2rem'}}>
        <h2 style={{color: '#2d3748', marginBottom: '1rem'}}>
          🗓️ Gestion des Disponibilités
        </h2>
        <p style={{color: '#6b7280'}}>
          Définissez vos créneaux de disponibilité pour que les élèves puissent réserver des cours avec vous.
        </p>
      </div>

      {/* Messages */}
      {message && (
        <div style={{
          padding: '1rem',
          marginBottom: '1.5rem',
          borderRadius: '8px',
          backgroundColor: message.includes('✅') ? '#f0f9ff' : 
                           message.includes('⚠️') ? '#fffbeb' : '#fef2f2',
          border: `1px solid ${message.includes('✅') ? '#0ea5e9' : 
                               message.includes('⚠️') ? '#f59e0b' : '#ef4444'}`,
          color: message.includes('✅') ? '#0c4a6e' : 
                 message.includes('⚠️') ? '#92400e' : '#7f1d1d'
        }}>
          {message}
        </div>
      )}

      {/* Bouton Ajouter */}
      <div style={{marginBottom: '1.5rem'}}>
        <button
          onClick={() => setShowAddForm(!showAddForm)}
          style={{
            padding: '0.75rem 1.5rem',
            backgroundColor: '#3b82f6',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer'
          }}
        >
          ➕ Ajouter une disponibilité
        </button>
      </div>

      {/* Formulaire d'ajout */}
      {showAddForm && (
        <div style={{
          padding: '1.5rem',
          backgroundColor: '#f8fafc',
          borderRadius: '8px',
          marginBottom: '2rem',
          border: '1px solid #e2e8f0'
        }}>
          <h3 style={{marginBottom: '1rem'}}>Nouvelle disponibilité</h3>
          <div style={{display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '1rem'}}>
            <div>
              <label style={{display: 'block', marginBottom: '0.5rem', fontWeight: 'bold'}}>
                Jour
              </label>
              <select
                value={newAvailability.jour}
                onChange={(e) => setNewAvailability({...newAvailability, jour: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '4px'
                }}
              >
                {jours.map(jour => (
                  <option key={jour} value={jour}>{joursLabels[jour]}</option>
                ))}
              </select>
            </div>
            <div>
              <label style={{display: 'block', marginBottom: '0.5rem', fontWeight: 'bold'}}>
                Heure de début
              </label>
              <input
                type="time"
                value={newAvailability.heure_debut}
                onChange={(e) => setNewAvailability({...newAvailability, heure_debut: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '4px'
                }}
              />
            </div>
            <div>
              <label style={{display: 'block', marginBottom: '0.5rem', fontWeight: 'bold'}}>
                Heure de fin
              </label>
              <input
                type="time"
                value={newAvailability.heure_fin}
                onChange={(e) => setNewAvailability({...newAvailability, heure_fin: e.target.value})}
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  border: '1px solid #d1d5db',
                  borderRadius: '4px'
                }}
              />
            </div>
            <div style={{display: 'flex', alignItems: 'end'}}>
              <button
                onClick={handleAddAvailability}
                disabled={saving}
                style={{
                  width: '100%',
                  padding: '0.5rem 1rem',
                  backgroundColor: saving ? '#9ca3af' : '#10b981',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: saving ? 'not-allowed' : 'pointer'
                }}
              >
                {saving ? 'Ajout...' : '💾 Ajouter'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Liste des disponibilités */}
      <div>
        <h3 style={{marginBottom: '1rem', color: '#374151'}}>Vos disponibilités actuelles</h3>
        
        {disponibilites.length === 0 ? (
          <div style={{
            textAlign: 'center',
            padding: '3rem',
            backgroundColor: '#f9fafb',
            borderRadius: '8px',
            color: '#6b7280'
          }}>
            <div style={{fontSize: '3rem', marginBottom: '1rem'}}>📅</div>
            <h3 style={{marginBottom: '0.5rem'}}>Aucune disponibilité configurée</h3>
            <p>Commencez par ajouter vos créneaux de disponibilité pour que les élèves puissent réserver des cours.</p>
          </div>
        ) : (
          <div style={{display: 'grid', gap: '1rem'}}>
            {jours.map(jour => {
              const disponibilitesJour = disponibilites.filter(d => d.jour === jour);
              return (
                <div key={jour} style={{
                  backgroundColor: 'white',
                  border: '1px solid #e5e7eb',
                  borderRadius: '8px',
                  padding: '1rem'
                }}>
                  <h4 style={{
                    margin: '0 0 1rem 0',
                    color: '#374151',
                    fontWeight: 'bold'
                  }}>
                    🕒 {joursLabels[jour]}
                  </h4>
                  
                  {disponibilitesJour.length === 0 ? (
                    <p style={{color: '#9ca3af', fontStyle: 'italic', margin: 0}}>
                      Aucune disponibilité
                    </p>
                  ) : (
                    <div style={{display: 'grid', gap: '0.5rem'}}>
                      {disponibilitesJour.map(dispo => (
                        <div key={dispo.id} style={{
                          display: 'flex',
                          justifyContent: 'space-between',
                          alignItems: 'center',
                          padding: '0.75rem',
                          backgroundColor: '#f9fafb',
                          borderRadius: '6px'
                        }}>
                          <div style={{display: 'flex', alignItems: 'center'}}>
                            <span style={{
                              display: 'inline-block',
                              padding: '0.25rem 0.5rem',
                              borderRadius: '12px',
                              fontSize: '0.75rem',
                              fontWeight: 'bold',
                              marginRight: '0.75rem',
                              backgroundColor: dispo.is_active ? '#dcfce7' : '#f3f4f6',
                              color: dispo.is_active ? '#166534' : '#374151'
                            }}>
                              {dispo.is_active ? 'Actif' : 'Inactif'}
                            </span>
                            <span style={{fontWeight: 'bold'}}>
                              {dispo.heure_debut} - {dispo.heure_fin}
                            </span>
                          </div>
                          <div style={{display: 'flex', gap: '0.5rem'}}>
                            <button
                              onClick={() => toggleAvailability(dispo.id, dispo.is_active)}
                              style={{
                                padding: '0.25rem 0.75rem',
                                border: 'none',
                                borderRadius: '4px',
                                fontSize: '0.875rem',
                                cursor: 'pointer',
                                backgroundColor: dispo.is_active ? '#fef3c7' : '#dcfce7',
                                color: dispo.is_active ? '#92400e' : '#166534'
                              }}
                            >
                              {dispo.is_active ? 'Désactiver' : 'Activer'}
                            </button>
                            <button
                              onClick={() => handleDeleteAvailability(dispo.id)}
                              style={{
                                padding: '0.25rem 0.5rem',
                                border: 'none',
                                backgroundColor: '#fee2e2',
                                color: '#dc2626',
                                borderRadius: '4px',
                                cursor: 'pointer'
                              }}
                            >
                              🗑️
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Aide */}
      <div style={{
        marginTop: '2rem',
        padding: '1rem',
        backgroundColor: '#eff6ff',
        borderRadius: '8px',
        border: '1px solid #bfdbfe'
      }}>
        <h3 style={{color: '#1e40af', marginBottom: '0.5rem'}}>💡 Conseils</h3>
        <ul style={{color: '#1e40af', fontSize: '0.875rem', margin: 0}}>
          <li>Définissez des créneaux de plusieurs heures que les élèves pourront subdiviser</li>
          <li>Vous pouvez désactiver temporairement une disponibilité sans la supprimer</li>
          <li>Les élèves pourront réserver des cours de 30 ou 60 minutes dans vos créneaux</li>
          <li>Vous recevrez une notification pour chaque demande de réservation</li>
        </ul>
      </div>
    </div>
  );
};

export default AvailabilityManagement;
import React, { useState, useEffect } from 'react';
import { Calendar, Clock, User, Euro, MessageSquare, CheckCircle, XCircle, AlertCircle } from 'lucide-react';

const BookingInterface = ({ profId, profData, onClose }) => {
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [duration, setDuration] = useState(30);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(false);
  const [booking, setBooking] = useState(false);
  const [step, setStep] = useState(1); // 1: Date, 2: Créneau, 3: Confirmation

  // Générer les 14 prochains jours
  const getNextDays = () => {
    const days = [];
    const today = new Date();
    for (let i = 1; i <= 14; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      days.push({
        date: date.toISOString().split('T')[0],
        display: date.toLocaleDateString('fr-FR', { 
          weekday: 'long', 
          day: 'numeric', 
          month: 'long' 
        })
      });
    }
    return days;
  };

  const availableDays = getNextDays();

  useEffect(() => {
    if (selectedDate) {
      fetchAvailableSlots();
    }
  }, [selectedDate, duration]);

  const fetchAvailableSlots = async () => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:3001/booking/availability/slots/${profId}/${selectedDate}?duree=${duration}`);
      const data = await response.json();
      
      if (data.success) {
        setAvailableSlots(data.creneaux || []);
        if (data.creneaux?.length > 0) {
          setStep(2);
        }
      } else {
        setMessage('❌ Erreur lors du chargement des créneaux');
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur de connexion');
    } finally {
      setLoading(false);
    }
  };

  const handleBooking = async () => {
    if (!selectedSlot) return;

    setBooking(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:3001/booking/reservations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          prof_id: profId,
          date: selectedDate,
          heure_debut: selectedSlot.heure_debut,
          duree_minutes: duration,
          message_eleve: message
        })
      });

      const data = await response.json();
      if (data.success) {
        setStep(4); // Succès
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de la réservation');
    } finally {
      setBooking(false);
    }
  };

  const calculatePrice = () => {
    if (!profData) return 0;
    return duration === 60 ? 
      (profData.prix_60min || profData.prix_30min * 2) : 
      profData.prix_30min;
  };

  if (step === 4) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg max-w-md w-full p-6">
          <div className="text-center">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              Demande envoyée !
            </h3>
            <p className="text-gray-600 mb-6">
              Votre demande de réservation a été envoyée à {profData?.nom}. 
              Vous recevrez une notification dès qu'il aura répondu.
            </p>
            <div className="bg-gray-50 rounded-lg p-4 mb-6">
              <div className="text-sm text-gray-600 space-y-1">
                <div><strong>Date :</strong> {new Date(selectedDate).toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long' })}</div>
                <div><strong>Heure :</strong> {selectedSlot?.heure_debut} - {selectedSlot?.heure_fin}</div>
                <div><strong>Durée :</strong> {duration} minutes</div>
                <div><strong>Prix :</strong> {calculatePrice()}€</div>
              </div>
            </div>
            <button
              onClick={onClose}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Fermer
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <User className="h-6 w-6 text-blue-600 mr-3" />
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  Réserver un cours avec {profData?.nom}
                </h2>
                <p className="text-gray-600">
                  {profData?.specialites?.join(', ') || 'Professeur d\'arabe'}
                </p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <XCircle className="h-6 w-6 text-gray-400" />
            </button>
          </div>
        </div>

        <div className="p-6">
          {/* Progress */}
          <div className="mb-8">
            <div className="flex items-center">
              {[1, 2, 3].map((stepNumber) => (
                <React.Fragment key={stepNumber}>
                  <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 ${
                    step >= stepNumber 
                      ? 'bg-blue-600 border-blue-600 text-white' 
                      : 'border-gray-300 text-gray-400'
                  }`}>
                    {stepNumber}
                  </div>
                  {stepNumber < 3 && (
                    <div className={`h-1 w-16 mx-2 ${
                      step > stepNumber ? 'bg-blue-600' : 'bg-gray-300'
                    }`} />
                  )}
                </React.Fragment>
              ))}
            </div>
            <div className="flex justify-between mt-2 text-sm text-gray-600">
              <span>Date</span>
              <span>Créneau</span>
              <span>Confirmation</span>
            </div>
          </div>

          {/* Messages d'erreur */}
          {message && message.includes('❌') && (
            <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center text-red-800">
              <AlertCircle className="h-5 w-5 mr-2" />
              {message}
            </div>
          )}

          {/* Étape 1: Sélection de la date et durée */}
          {step === 1 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  Choisissez la durée du cours
                </h3>
                <div className="grid grid-cols-2 gap-4">
                  <button
                    onClick={() => setDuration(30)}
                    className={`p-4 border-2 rounded-lg transition-colors ${
                      duration === 30 
                        ? 'border-blue-600 bg-blue-50 text-blue-900' 
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <div className="text-center">
                      <Clock className="h-6 w-6 mx-auto mb-2" />
                      <div className="font-semibold">30 minutes</div>
                      <div className="text-sm text-gray-600">{profData?.prix_30min || 15}€</div>
                    </div>
                  </button>
                  <button
                    onClick={() => setDuration(60)}
                    className={`p-4 border-2 rounded-lg transition-colors ${
                      duration === 60 
                        ? 'border-blue-600 bg-blue-50 text-blue-900' 
                        : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <div className="text-center">
                      <Clock className="h-6 w-6 mx-auto mb-2" />
                      <div className="font-semibold">60 minutes</div>
                      <div className="text-sm text-gray-600">{calculatePrice()}€</div>
                    </div>
                  </button>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  Sélectionnez une date
                </h3>
                <div className="grid grid-cols-2 gap-3 max-h-64 overflow-y-auto">
                  {availableDays.map((day) => (
                    <button
                      key={day.date}
                      onClick={() => setSelectedDate(day.date)}
                      className={`p-3 text-left border rounded-lg transition-colors ${
                        selectedDate === day.date 
                          ? 'border-blue-600 bg-blue-50 text-blue-900' 
                          : 'border-gray-300 hover:border-gray-400'
                      }`}
                    >
                      <div className="font-medium">{day.display}</div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Étape 2: Sélection du créneau */}
          {step === 2 && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">
                  Créneaux disponibles
                </h3>
                <button
                  onClick={() => setStep(1)}
                  className="text-blue-600 hover:text-blue-700 text-sm"
                >
                  ← Changer la date
                </button>
              </div>

              <div className="bg-gray-50 rounded-lg p-4">
                <div className="text-sm text-gray-600">
                  <div><strong>Date :</strong> {new Date(selectedDate).toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long' })}</div>
                  <div><strong>Durée :</strong> {duration} minutes</div>
                  <div><strong>Prix :</strong> {calculatePrice()}€</div>
                </div>
              </div>

              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                  <span className="ml-3">Chargement des créneaux...</span>
                </div>
              ) : availableSlots.length === 0 ? (
                <div className="text-center py-8">
                  <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Aucun créneau disponible</h3>
                  <p className="text-gray-600">
                    Le professeur n'a pas de créneaux libres pour cette date. 
                    Essayez une autre date.
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-3 gap-3">
                  {availableSlots.map((slot, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setSelectedSlot(slot);
                        setStep(3);
                      }}
                      className="p-3 border border-gray-300 rounded-lg hover:border-blue-600 hover:bg-blue-50 transition-colors text-center"
                    >
                      <div className="font-medium">{slot.heure_debut}</div>
                      <div className="text-sm text-gray-600">→ {slot.heure_fin}</div>
                    </button>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Étape 3: Confirmation */}
          {step === 3 && selectedSlot && (
            <div className="space-y-6">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">
                  Confirmer la réservation
                </h3>
                <button
                  onClick={() => setStep(2)}
                  className="text-blue-600 hover:text-blue-700 text-sm"
                >
                  ← Changer le créneau
                </button>
              </div>

              {/* Récapitulatif */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200">
                <h4 className="font-semibold text-gray-900 mb-4 flex items-center">
                  <CheckCircle className="h-5 w-5 text-blue-600 mr-2" />
                  Récapitulatif de votre cours
                </h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="text-gray-600">Professeur :</span>
                    <div className="font-medium">{profData?.nom}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Spécialité :</span>
                    <div className="font-medium">{profData?.specialites?.[0] || 'Arabe général'}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Date :</span>
                    <div className="font-medium">
                      {new Date(selectedDate).toLocaleDateString('fr-FR', { 
                        weekday: 'long', 
                        day: 'numeric', 
                        month: 'long' 
                      })}
                    </div>
                  </div>
                  <div>
                    <span className="text-gray-600">Heure :</span>
                    <div className="font-medium">{selectedSlot.heure_debut} - {selectedSlot.heure_fin}</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Durée :</span>
                    <div className="font-medium">{duration} minutes</div>
                  </div>
                  <div>
                    <span className="text-gray-600">Prix :</span>
                    <div className="font-medium text-lg text-blue-600">{calculatePrice()}€</div>
                  </div>
                </div>
              </div>

              {/* Message optionnel */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Message pour le professeur (optionnel)
                </label>
                <textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder="Présentez-vous ou indiquez vos objectifs pour ce cours..."
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
                  rows={3}
                  maxLength={500}
                />
                <div className="text-xs text-gray-500 mt-1">
                  {message.length}/500 caractères
                </div>
              </div>

              {/* Informations importantes */}
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <h4 className="font-semibold text-yellow-800 mb-2 flex items-center">
                  <AlertCircle className="h-5 w-5 mr-2" />
                  À savoir
                </h4>
                <ul className="text-sm text-yellow-700 space-y-1">
                  <li>• Votre demande sera envoyée au professeur pour validation</li>
                  <li>• Vous recevrez une notification dès qu'il aura répondu</li>
                  <li>• Le lien de cours vous sera fourni une fois la réservation confirmée</li>
                  <li>• Vous pourrez annuler jusqu'à 4h avant le début du cours</li>
                </ul>
              </div>

              {/* Boutons d'action */}
              <div className="flex space-x-4">
                <button
                  onClick={onClose}
                  className="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Annuler
                </button>
                <button
                  onClick={handleBooking}
                  disabled={booking}
                  className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors flex items-center justify-center"
                >
                  {booking ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Envoi en cours...
                    </>
                  ) : (
                    <>
                      <Euro className="h-4 w-4 mr-2" />
                      Confirmer la réservation
                    </>
                  )}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default BookingInterface;
// src/components/Login.js
import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import { supabase } from "../supabaseClient";

function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = async () => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) {
      alert("Erreur de connexion : " + error.message);
    } else {
      const role = data.user?.user_metadata?.role || "eleve";

      if (role === "prof") {
        navigate("/prof-dashboard");
      } else {
        navigate("/dashboard");
      }
    }
  };

  return (
    <div style={{ textAlign: "center", marginTop: "100px" }}>
      <h2>Connexion à FirstArabic</h2>

      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        style={{ display: "block", margin: "10px auto" }}
      />

      <input
        type="password"
        placeholder="Mot de passe"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        style={{ display: "block", margin: "10px auto" }}
      />

      <button onClick={handleLogin} style={{ marginTop: "10px" }}>
        Se connecter
      </button>

      {/* 🔗 Lien vers mot de passe oublié */}
      <p style={{ marginTop: "10px" }}>
        <Link to="/forgot-password">Mot de passe oublié ?</Link>
      </p>

      <p style={{ marginTop: "20px" }}>
        Pas encore de compte ? <Link to="/register">Créer un compte</Link>
      </p>
    </div>
  );
}

export default Login;
// src/components/ProtectedRoute.js
import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "../supabaseClient";

function ProtectedRoute({ children, allowedRoles = [] }) {
  const navigate = useNavigate();

  useEffect(() => {
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      const role = session?.user?.user_metadata?.role;

      if (!session || (allowedRoles.length && !allowedRoles.includes(role))) {
        navigate("/login");
      }
    };

    checkAuth();
  }, [navigate, allowedRoles]);

  return children;
}

export default ProtectedRoute;
import React, { useState, useEffect } from 'react';

const ReservationsDashboard = () => {
  const [reservations, setReservations] = useState([]);
  const [userType, setUserType] = useState('');
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState('all'); // all, en_attente, confirmé, etc.
  const [message, setMessage] = useState('');

  useEffect(() => {
    fetchReservations();
  }, []);

  const fetchReservations = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setMessage('⚠️ Vous devez être connecté pour voir vos réservations');
        setLoading(false);
        return;
      }

      const response = await fetch('http://localhost:3001/booking/reservations/me', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const data = await response.json();
      if (data.success) {
        setReservations(data.reservations || []);
        setUserType(data.user_type);
      } else {
        setMessage('❌ Erreur lors du chargement des réservations');
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur de connexion');
    } finally {
      setLoading(false);
    }
  };

  const handleConfirmReservation = async (reservationId) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3001/booking/reservations/${reservationId}/confirm`, {
        method: 'PUT',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const data = await response.json();
      if (data.success) {
        setMessage('✅ Réservation confirmée avec succès');
        fetchReservations(); // Recharger la liste
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de la confirmation');
    }
  };

  const handleRefuseReservation = async (reservationId) => {
    const motif = window.prompt('Motif du refus (optionnel):');
    if (motif === null) return; // Annulé

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3001/booking/reservations/${reservationId}/refuse`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ motif_refus: motif })
      });
      
      const data = await response.json();
      if (data.success) {
        setMessage('✅ Réservation refusée');
        fetchReservations();
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors du refus');
    }
  };

  const handleCancelReservation = async (reservationId) => {
    if (!window.confirm('Êtes-vous sûr de vouloir annuler cette réservation ?')) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3001/booking/reservations/${reservationId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const data = await response.json();
      if (data.success) {
        setMessage('✅ Réservation annulée');
        fetchReservations();
      } else {
        setMessage(`❌ ${data.error}`);
      }
    } catch (error) {
      console.error('Erreur:', error);
      setMessage('❌ Erreur lors de l\'annulation');
    }
  };

  const getStatusBadge = (statut) => {
    const statusConfig = {
      'en_attente': { color: '#fbbf24', bg: '#fef3c7', label: 'En attente' },
      'confirmé': { color: '#10b981', bg: '#d1fae5', label: 'Confirmé' },
      'refusé': { color: '#ef4444', bg: '#fee2e2', label: 'Refusé' },
      'annulé': { color: '#6b7280', bg: '#f3f4f6', label: 'Annulé' },
      'expiré': { color: '#6b7280', bg: '#f3f4f6', label: 'Expiré' }
    };

    const config = statusConfig[statut] || statusConfig['en_attente'];

    return (
      <span style={{
        display: 'inline-block',
        padding: '0.25rem 0.75rem',
        borderRadius: '12px',
        fontSize: '0.75rem',
        fontWeight: 'bold',
        backgroundColor: config.bg,
        color: config.color
      }}>
        {config.label}
      </span>
    );
  };

  const filteredReservations = reservations.filter(res => 
    filter === 'all' || res.statut === filter
  );

  const upcomingConfirmed = reservations.filter(res => 
    res.statut === 'confirmé' && new Date(`${res.date}T${res.heure_debut}`) > new Date()
  );

  if (loading) {
    return (
      <div style={{padding: '2rem', textAlign: 'center'}}>
        <div>Chargement de vos réservations...</div>
      </div>
    );
  }

  return (
    <div style={{padding: '2rem', backgroundColor: 'white', borderRadius: '15px', margin: '2rem 0'}}>
      {/* Header */}
      <div style={{marginBottom: '2rem'}}>
        <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', flexWrap: 'wrap', gap: '1rem'}}>
          <div>
            <h2 style={{color: '#2d3748', marginBottom: '0.5rem'}}>
              📋 {userType === 'prof' ? 'Demandes de réservation' : 'Mes réservations'}
            </h2>
            <p style={{color: '#6b7280', margin: 0}}>
              {userType === 'prof' 
                ? 'Gérez les demandes de cours de vos élèves' 
                : 'Suivez vos demandes et cours programmés'
              }
            </p>
          </div>
          
          {/* Stats rapides */}
          <div style={{display: 'flex', gap: '1rem'}}>
            <div style={{
              backgroundColor: '#eff6ff',
              padding: '1rem',
              borderRadius: '8px',
              textAlign: 'center',
              minWidth: '100px'
            }}>
              <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#2563eb'}}>
                {upcomingConfirmed.length}
              </div>
              <div style={{fontSize: '0.75rem', color: '#1e40af'}}>
                {userType === 'prof' ? 'Cours à venir' : 'Cours programmés'}
              </div>
            </div>
            <div style={{
              backgroundColor: '#fef3c7',
              padding: '1rem',
              borderRadius: '8px',
              textAlign: 'center',
              minWidth: '100px'
            }}>
              <div style={{fontSize: '1.5rem', fontWeight: 'bold', color: '#d97706'}}>
                {reservations.filter(r => r.statut === 'en_attente').length}
              </div>
              <div style={{fontSize: '0.75rem', color: '#92400e'}}>En attente</div>
            </div>
          </div>
        </div>
      </div>

      {/* Messages */}
      {message && (
        <div style={{
          padding: '1rem',
          marginBottom: '1.5rem',
          borderRadius: '8px',
          backgroundColor: message.includes('✅') ? '#f0f9ff' : '#fef2f2',
          border: `1px solid ${message.includes('✅') ? '#0ea5e9' : '#ef4444'}`,
          color: message.includes('✅') ? '#0c4a6e' : '#7f1d1d'
        }}>
          {message}
        </div>
      )}

      {/* Filtres */}
      <div style={{marginBottom: '1.5rem'}}>
        <div style={{display: 'flex', gap: '0.5rem', flexWrap: 'wrap'}}>
          {[
            { key: 'all', label: 'Toutes' },
            { key: 'en_attente', label: 'En attente' },
            { key: 'confirmé', label: 'Confirmées' },
            { key: 'refusé', label: 'Refusées' },
            { key: 'annulé', label: 'Annulées' }
          ].map(filterOption => (
            <button
              key={filterOption.key}
              onClick={() => setFilter(filterOption.key)}
              style={{
                padding: '0.5rem 1rem',
                border: 'none',
                borderRadius: '6px',
                fontSize: '0.875rem',
                fontWeight: 'bold',
                cursor: 'pointer',
                backgroundColor: filter === filterOption.key ? '#3b82f6' : '#f3f4f6',
                color: filter === filterOption.key ? 'white' : '#374151'
              }}
            >
              {filterOption.label}
            </button>
          ))}
        </div>
      </div>

      {/* Liste des réservations */}
      {filteredReservations.length === 0 ? (
        <div style={{
          textAlign: 'center',
          padding: '3rem',
          backgroundColor: '#f9fafb',
          borderRadius: '8px',
          color: '#6b7280'
        }}>
          <div style={{fontSize: '3rem', marginBottom: '1rem'}}>📋</div>
          <h3 style={{marginBottom: '0.5rem'}}>
            {filter === 'all' ? 'Aucune réservation' : `Aucune réservation ${filter}`}
          </h3>
          <p style={{margin: 0}}>
            {userType === 'prof' 
              ? 'Les demandes de cours apparaîtront ici quand les élèves vous contacteront.'
              : 'Vos demandes de cours apparaîtront ici après avoir réservé avec un professeur.'
            }
          </p>
        </div>
      ) : (
        <div style={{display: 'grid', gap: '1rem'}}>
          {filteredReservations.map((reservation) => (
            <div key={reservation.id} style={{
              backgroundColor: 'white',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              padding: '1.5rem'
            }}>
              <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', gap: '1rem'}}>
                <div style={{flex: '1'}}>
                  {/* En-tête avec statut */}
                  <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem', flexWrap: 'wrap', gap: '0.5rem'}}>
                    <div style={{display: 'flex', alignItems: 'center'}}>
                      <span style={{marginRight: '0.5rem'}}>👤</span>
                      <span style={{fontWeight: 'bold', color: '#374151'}}>
                        {userType === 'prof' 
                          ? `${reservation.eleves?.prenom || ''} ${reservation.eleves?.nom || 'Élève'}`
                          : reservation.profs?.nom || 'Professeur'
                        }
                      </span>
                    </div>
                    {getStatusBadge(reservation.statut)}
                  </div>

                  {/* Détails du cours */}
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
                    gap: '1rem',
                    marginBottom: '1rem'
                  }}>
                    <div>
                      <div style={{fontSize: '0.875rem', color: '#6b7280'}}>Date</div>
                      <div style={{fontWeight: 'bold'}}>
                        {new Date(reservation.date).toLocaleDateString('fr-FR', {
                          weekday: 'long',
                          day: 'numeric',
                          month: 'long'
                        })}
                      </div>
                    </div>
                    <div>
                      <div style={{fontSize: '0.875rem', color: '#6b7280'}}>Heure</div>
                      <div style={{fontWeight: 'bold'}}>
                        🕒 {reservation.heure_debut} - {reservation.heure_fin}
                      </div>
                    </div>
                    <div>
                      <div style={{fontSize: '0.875rem', color: '#6b7280'}}>Durée</div>
                      <div style={{fontWeight: 'bold'}}>{reservation.duree_minutes || 30} min</div>
                    </div>
                    <div>
                      <div style={{fontSize: '0.875rem', color: '#6b7280'}}>Prix</div>
                      <div style={{fontWeight: 'bold', color: '#10b981'}}>
                        💰 {reservation.prix_total}€
                      </div>
                    </div>
                  </div>

                  {/* Message de l'élève */}
                  {reservation.message_eleve && (
                    <div style={{marginBottom: '1rem'}}>
                      <div style={{fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem'}}>
                        Message de l'élève
                      </div>
                      <div style={{
                        backgroundColor: '#f9fafb',
                        padding: '0.75rem',
                        borderRadius: '6px',
                        fontSize: '0.875rem'
                      }}>
                        💬 {reservation.message_eleve}
                      </div>
                    </div>
                  )}

                  {/* Motif de refus */}
                  {reservation.motif_refus && (
                    <div style={{marginBottom: '1rem'}}>
                      <div style={{fontSize: '0.875rem', color: '#6b7280', marginBottom: '0.25rem'}}>
                        Motif du refus
                      </div>
                      <div style={{
                        backgroundColor: '#fee2e2',
                        padding: '0.75rem',
                        borderRadius: '6px',
                        fontSize: '0.875rem',
                        color: '#7f1d1d'
                      }}>
                        {reservation.motif_refus}
                      </div>
                    </div>
                  )}

                  {/* Lien Jitsi pour cours confirmés */}
                  {reservation.statut === 'confirmé' && reservation.cours_id && (
                    <div style={{marginBottom: '1rem'}}>
                      <div style={{
                        backgroundColor: '#d1fae5',
                        border: '1px solid #34d399',
                        borderRadius: '6px',
                        padding: '0.75rem'
                      }}>
                        <div style={{display: 'flex', alignItems: 'center', color: '#065f46'}}>
                          <span style={{marginRight: '0.5rem'}}>🎥</span>
                          <span style={{fontWeight: 'bold'}}>Cours confirmé</span>
                        </div>
                        <div style={{fontSize: '0.875rem', color: '#047857', marginTop: '0.25rem'}}>
                          Le lien de cours sera disponible 15 minutes avant le début.
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Actions */}
                <div style={{display: 'flex', flexDirection: 'column', gap: '0.5rem', minWidth: '120px'}}>
                  {userType === 'prof' && reservation.statut === 'en_attente' && (
                    <>
                      <button
                        onClick={() => handleConfirmReservation(reservation.id)}
                        style={{
                          padding: '0.5rem 1rem',
                          backgroundColor: '#10b981',
                          color: 'white',
                          border: 'none',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '0.875rem',
                          fontWeight: 'bold'
                        }}
                      >
                        ✅ Confirmer
                      </button>
                      <button
                        onClick={() => handleRefuseReservation(reservation.id)}
                        style={{
                          padding: '0.5rem 1rem',
                          backgroundColor: '#ef4444',
                          color: 'white',
                          border: 'none',
                          borderRadius: '6px',
                          cursor: 'pointer',
                          fontSize: '0.875rem',
                          fontWeight: 'bold'
                        }}
                      >
                        ❌ Refuser
                      </button>
                    </>
                  )}

                  {userType === 'eleve' && reservation.statut === 'en_attente' && (
                    <button
                      onClick={() => handleCancelReservation(reservation.id)}
                      style={{
                        padding: '0.5rem 1rem',
                        backgroundColor: '#6b7280',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        fontWeight: 'bold'
                      }}
                    >
                      ❌ Annuler
                    </button>
                  )}

                  {reservation.statut === 'confirmé' && (
                    <div style={{textAlign: 'center', padding: '0.5rem'}}>
                      <div style={{fontSize: '0.75rem', color: '#6b7280', marginBottom: '0.25rem'}}>
                        Cours dans
                      </div>
                      <div style={{fontSize: '0.875rem', fontWeight: 'bold', color: '#3b82f6'}}>
                        {Math.ceil((new Date(`${reservation.date}T${reservation.heure_debut}`) - new Date()) / (1000 * 60 * 60 * 24))} jours
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Footer avec dates */}
              <div style={{
                marginTop: '1rem',
                paddingTop: '1rem',
                borderTop: '1px solid #f3f4f6',
                display: 'flex',
                justifyContent: 'space-between',
                fontSize: '0.75rem',
                color: '#9ca3af',
                flexWrap: 'wrap',
                gap: '0.5rem'
              }}>
                <span>Demandé le {new Date(reservation.created_at).toLocaleDateString('fr-FR')}</span>
                {reservation.confirmed_at && (
                  <span>Confirmé le {new Date(reservation.confirmed_at).toLocaleDateString('fr-FR')}</span>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ReservationsDashboard;
